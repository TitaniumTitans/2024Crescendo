

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <wpi\sendable\SendableBuilder.h>










namespace rpygen {


using namespace wpi;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_wpi__SendableBuilder :

    CfgBase

{
    using Base = wpi::SendableBuilder;

    
    
    using override_base_SetSmartDashboardType_Tstring_view = wpi::SendableBuilder;
    
    using override_base_SetActuator_b = wpi::SendableBuilder;
    
    using override_base_SetSafeState_Tfunction = wpi::SendableBuilder;
    
    using override_base_AddBooleanProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstBoolean_Tstring_view_b = wpi::SendableBuilder;
    
    using override_base_AddIntegerProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstInteger_Tstring_view_x = wpi::SendableBuilder;
    
    using override_base_AddFloatProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstFloat_Tstring_view_f = wpi::SendableBuilder;
    
    using override_base_AddDoubleProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstDouble_Tstring_view_d = wpi::SendableBuilder;
    
    using override_base_AddStringProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstString_Tstring_view_Tstring_view = wpi::SendableBuilder;
    
    using override_base_AddBooleanArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstBooleanArray_Tstring_view_Tspan = wpi::SendableBuilder;
    
    using override_base_AddIntegerArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstIntegerArray_Tstring_view_Tspan = wpi::SendableBuilder;
    
    using override_base_AddFloatArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstFloatArray_Tstring_view_Tspan = wpi::SendableBuilder;
    
    using override_base_AddDoubleArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstDoubleArray_Tstring_view_Tspan = wpi::SendableBuilder;
    
    using override_base_AddStringArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstStringArray_Tstring_view_Tspan = wpi::SendableBuilder;
    
    using override_base_AddRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_PublishConstRaw_Tstring_view_Tstring_view_Tspan = wpi::SendableBuilder;
    
    using override_base_AddSmallStringProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_AddSmallBooleanArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_AddSmallIntegerArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_AddSmallFloatArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_AddSmallDoubleArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_AddSmallStringArrayProperty_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_AddSmallRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction = wpi::SendableBuilder;
    
    using override_base_KGetBackendKind_v = wpi::SendableBuilder;
    
    using override_base_KIsPublished_v = wpi::SendableBuilder;
    
    using override_base_Update_v = wpi::SendableBuilder;
    
    using override_base_ClearProperties_v = wpi::SendableBuilder;
    
};



template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_wpi__SendableBuilder : PyTrampolineBase, virtual py::trampoline_self_life_support {
    using PyTrampolineBase::PyTrampolineBase;




  using BackendKind [[maybe_unused]] = typename wpi::SendableBuilder::BackendKind;








    
    
#ifndef RPYGEN_DISABLE_SetSmartDashboardType_Tstring_view
    void SetSmartDashboardType(std::string_view type) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "setSmartDashboardType", SetSmartDashboardType, type);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetActuator_b
    void SetActuator(bool value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "setActuator", SetActuator, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetSafeState_Tfunction
    void SetSafeState(std::function<void ()> func) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "setSafeState", SetSafeState, func);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddBooleanProperty_Tstring_view_Tfunction_Tfunction
    void AddBooleanProperty(std::string_view key, std::function<bool ()> getter, std::function<void (bool)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addBooleanProperty", AddBooleanProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstBoolean_Tstring_view_b
    void PublishConstBoolean(std::string_view key, bool value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstBoolean", PublishConstBoolean, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddIntegerProperty_Tstring_view_Tfunction_Tfunction
    void AddIntegerProperty(std::string_view key, std::function<int64_t ()> getter, std::function<void (int64_t)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addIntegerProperty", AddIntegerProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstInteger_Tstring_view_x
    void PublishConstInteger(std::string_view key, int64_t value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstInteger", PublishConstInteger, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddFloatProperty_Tstring_view_Tfunction_Tfunction
    void AddFloatProperty(std::string_view key, std::function<float ()> getter, std::function<void (float)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addFloatProperty", AddFloatProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstFloat_Tstring_view_f
    void PublishConstFloat(std::string_view key, float value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstFloat", PublishConstFloat, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddDoubleProperty_Tstring_view_Tfunction_Tfunction
    void AddDoubleProperty(std::string_view key, std::function<double ()> getter, std::function<void (double)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addDoubleProperty", AddDoubleProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstDouble_Tstring_view_d
    void PublishConstDouble(std::string_view key, double value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstDouble", PublishConstDouble, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddStringProperty_Tstring_view_Tfunction_Tfunction
    void AddStringProperty(std::string_view key, std::function<std::string ()> getter, std::function<void (std::string_view)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addStringProperty", AddStringProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstString_Tstring_view_Tstring_view
    void PublishConstString(std::string_view key, std::string_view value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstString", PublishConstString, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddBooleanArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddBooleanArrayProperty(std::string_view key, std::function<std::vector<int> ()> getter, std::function<void (std::span<const int>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addBooleanArrayProperty", AddBooleanArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstBooleanArray_Tstring_view_Tspan
    void PublishConstBooleanArray(std::string_view key, std::span<const int> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstBooleanArray", PublishConstBooleanArray, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddIntegerArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddIntegerArrayProperty(std::string_view key, std::function<std::vector<int64_t> ()> getter, std::function<void (std::span<const int64_t>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addIntegerArrayProperty", AddIntegerArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstIntegerArray_Tstring_view_Tspan
    void PublishConstIntegerArray(std::string_view key, std::span<const int64_t> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstIntegerArray", PublishConstIntegerArray, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddFloatArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddFloatArrayProperty(std::string_view key, std::function<std::vector<float> ()> getter, std::function<void (std::span<const float>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addFloatArrayProperty", AddFloatArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstFloatArray_Tstring_view_Tspan
    void PublishConstFloatArray(std::string_view key, std::span<const float> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstFloatArray", PublishConstFloatArray, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddDoubleArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddDoubleArrayProperty(std::string_view key, std::function<std::vector<double> ()> getter, std::function<void (std::span<const double>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addDoubleArrayProperty", AddDoubleArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstDoubleArray_Tstring_view_Tspan
    void PublishConstDoubleArray(std::string_view key, std::span<const double> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstDoubleArray", PublishConstDoubleArray, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddStringArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddStringArrayProperty(std::string_view key, std::function<std::vector<std::string> ()> getter, std::function<void (std::span<const std::string>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addStringArrayProperty", AddStringArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstStringArray_Tstring_view_Tspan
    void PublishConstStringArray(std::string_view key, std::span<const std::string> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstStringArray", PublishConstStringArray, key, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction
    void AddRawProperty(std::string_view key, std::string_view typeString, std::function<std::vector<uint8_t> ()> getter, std::function<void (std::span<const uint8_t>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addRawProperty", AddRawProperty, key, typeString, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstRaw_Tstring_view_Tstring_view_Tspan
    void PublishConstRaw(std::string_view key, std::string_view typeString, std::span<const uint8_t> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "publishConstRaw", PublishConstRaw, key, typeString, value);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallStringProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallStringProperty(std::string_view key, std::function<std::string_view (wpi::SmallVectorImpl<char>& buf)> getter, std::function<void (std::string_view)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addSmallStringProperty", AddSmallStringProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallBooleanArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallBooleanArrayProperty(std::string_view key, std::function<std::span<const int> (wpi::SmallVectorImpl<int>& buf)> getter, std::function<void (std::span<const int>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addSmallBooleanArrayProperty", AddSmallBooleanArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallIntegerArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallIntegerArrayProperty(std::string_view key, std::function<std::span<const int64_t> (wpi::SmallVectorImpl<int64_t>& buf)> getter, std::function<void (std::span<const int64_t>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addSmallIntegerArrayProperty", AddSmallIntegerArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallFloatArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallFloatArrayProperty(std::string_view key, std::function<std::span<const float> (wpi::SmallVectorImpl<float>& buf)> getter, std::function<void (std::span<const float>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addSmallFloatArrayProperty", AddSmallFloatArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallDoubleArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallDoubleArrayProperty(std::string_view key, std::function<std::span<const double> (wpi::SmallVectorImpl<double>& buf)> getter, std::function<void (std::span<const double>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addSmallDoubleArrayProperty", AddSmallDoubleArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallStringArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallStringArrayProperty(std::string_view key, std::function<std::span<const std::string> (wpi::SmallVectorImpl<std::string>& buf)> getter, std::function<void (std::span<const std::string>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addSmallStringArrayProperty", AddSmallStringArrayProperty, key, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction
    void AddSmallRawProperty(std::string_view key, std::string_view typeString, std::function<std::span<uint8_t> (wpi::SmallVectorImpl<uint8_t>& buf)> getter, std::function<void (std::span<const uint8_t>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "addSmallRawProperty", AddSmallRawProperty, key, typeString, getter, setter);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetBackendKind_v
    BackendKind GetBackendKind() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(BackendKind), LookupBase,
            "getBackendKind", GetBackendKind, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KIsPublished_v
    bool IsPublished() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(bool), LookupBase,
            "isPublished", IsPublished, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_Update_v
    void Update() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "update", Update, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_ClearProperties_v
    void ClearProperties() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(SendableBuilder, PYBIND11_TYPE(void), LookupBase,
            "clearProperties", ClearProperties, );
    
    
    
    }
#endif

    

    
    

    

    
};

}; // namespace rpygen


