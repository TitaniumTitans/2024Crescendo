

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <wpi\DataLog.h>










#include <pybind11/functional.h>

#include <wpi_span_type_caster.h>

#include <wpystruct.h>


namespace rpygen {


using namespace wpi::log;




template <typename T, typename I>
struct bind_wpi__log__StructArrayLogEntry {

    

    
  
  

    

    py::class_<typename wpi::log::StructArrayLogEntry<T, I>, wpi::log::DataLogEntry> cls_StructArrayLogEntry;

    

    
    

    py::module &m;
    std::string clsName;

bind_wpi__log__StructArrayLogEntry(py::module &m, const char * clsName) :
    
    cls_StructArrayLogEntry(m, clsName),

  

  
  
    m(m),
    clsName(clsName)
{
    
  

}

void finish(const char * set_doc = NULL, const char * add_doc = NULL) {

    

  cls_StructArrayLogEntry.doc() =
    "Log raw struct serializable array of objects.";

  cls_StructArrayLogEntry
  
    
  .def(py::init([](DataLog &log, std::string_view name, const py::type &t, int64_t timestamp) {
  WPyStructInfo info(t);
  return std::make_shared<StructArrayLogEntry<WPyStruct, WPyStructInfo>>(log, name, info, timestamp);
}
),
      py::arg("log"), py::arg("name"), py::arg("type"), py::arg("timestamp") = 0
    , py::keep_alive<1, 2>()
  )
  
  
  
    
  .def(py::init([](DataLog &log, std::string_view name, std::string_view metadata, const py::type &t, int64_t timestamp) {
  WPyStructInfo info(t);
  return std::make_shared<StructArrayLogEntry<WPyStruct, WPyStructInfo>>(log, name, metadata, info, timestamp);
}
),
      py::arg("log"), py::arg("name"), py::arg("metadata"), py::arg("type"), py::arg("timestamp") = 0
    , py::keep_alive<1, 2>()
  )
  
  
  
    
  .
def
("append", static_cast<void(wpi::log::StructArrayLogEntry<T, I>::*)(std::span<const T>, int64_t)>(
        &wpi::log::StructArrayLogEntry<T, I>::Append),
      py::arg("data"), py::arg("timestamp") = 0, release_gil(), py::doc(
    "Appends a record to the log.\n"
"\n"
":param data:      Data to record\n"
":param timestamp: Time stamp (may be 0 to indicate now)")
  )
  
  
  ;

  



    if (set_doc) {
        cls_StructArrayLogEntry.doc() = set_doc;
    }
    if (add_doc) {
        cls_StructArrayLogEntry.doc() = py::cast<std::string>(cls_StructArrayLogEntry.doc()) + add_doc;
    }

    
}

}; // struct bind_wpi__log__StructArrayLogEntry

}; // namespace rpygen
