

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <frc\AnalogGyro.h>


#include <wpi/sendable/SendableBuilder.h>

#include <frc/AnalogInput.h>









#include <rpygen/wpi__Sendable.hpp>



namespace rpygen {


using namespace frc;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__AnalogGyro :


    PyTrampolineCfg_wpi__Sendable<

CfgBase
>

{
    using Base = frc::AnalogGyro;

    
    
    using override_base_KGetCenter_v = frc::AnalogGyro;
    
    using override_base_KGetOffset_v = frc::AnalogGyro;
    
    using override_base_InitSendable_RTSendableBuilder = frc::AnalogGyro;
    
};




template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc__AnalogGyro =

    PyTrampoline_wpi__Sendable<

        PyTrampolineBase

        
        , PyTrampolineCfg
    >

;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__AnalogGyro : PyTrampolineBase_frc__AnalogGyro<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc__AnalogGyro<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc__AnalogGyro;






    static constexpr auto kOversampleBits [[maybe_unused]] = frc::AnalogGyro::kOversampleBits;

    static constexpr auto kAverageBits [[maybe_unused]] = frc::AnalogGyro::kAverageBits;

    static constexpr auto kSamplesPerSecond [[maybe_unused]] = frc::AnalogGyro::kSamplesPerSecond;

    static constexpr auto kCalibrationSampleTime [[maybe_unused]] = frc::AnalogGyro::kCalibrationSampleTime;

    static constexpr auto kDefaultVoltsPerDegreePerSecond [[maybe_unused]] = frc::AnalogGyro::kDefaultVoltsPerDegreePerSecond;






    
    
#ifndef RPYGEN_DISABLE_KGetCenter_v
    int GetCenter() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetCenter_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(int), LookupBase,
            "getCenter", );
        return CxxCallBase::GetCenter();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetOffset_v
    double GetOffset() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetOffset_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getOffset", );
        return CxxCallBase::GetOffset();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "initSendable", builder);
        return CxxCallBase::InitSendable(std::forward<decltype(builder)>(builder));
    
    
    
    }
#endif

    

    
    

    

    
};

}; // namespace rpygen


