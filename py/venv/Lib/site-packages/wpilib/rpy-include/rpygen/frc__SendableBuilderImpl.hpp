

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <frc\smartdashboard\SendableBuilderImpl.h>










#include <rpygen/nt__NTSendableBuilder.hpp>



namespace rpygen {


using namespace frc;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__SendableBuilderImpl :


    PyTrampolineCfg_nt__NTSendableBuilder<

CfgBase
>

{
    using Base = frc::SendableBuilderImpl;

    
    
    using override_base_GetTable_v = frc::SendableBuilderImpl;
    
    using override_base_KIsPublished_v = frc::SendableBuilderImpl;
    
    using override_base_Update_v = frc::SendableBuilderImpl;
    
    using override_base_ClearProperties_v = frc::SendableBuilderImpl;
    
    using override_base_SetSmartDashboardType_Tstring_view = frc::SendableBuilderImpl;
    
    using override_base_SetActuator_b = frc::SendableBuilderImpl;
    
    using override_base_SetSafeState_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_SetUpdateTable_Tunique_function = frc::SendableBuilderImpl;
    
    using override_base_GetTopic_Tstring_view = frc::SendableBuilderImpl;
    
    using override_base_AddBooleanProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstBoolean_Tstring_view_b = frc::SendableBuilderImpl;
    
    using override_base_AddIntegerProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstInteger_Tstring_view_x = frc::SendableBuilderImpl;
    
    using override_base_AddFloatProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstFloat_Tstring_view_f = frc::SendableBuilderImpl;
    
    using override_base_AddDoubleProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstDouble_Tstring_view_d = frc::SendableBuilderImpl;
    
    using override_base_AddStringProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstString_Tstring_view_Tstring_view = frc::SendableBuilderImpl;
    
    using override_base_AddBooleanArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstBooleanArray_Tstring_view_Tspan = frc::SendableBuilderImpl;
    
    using override_base_AddIntegerArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstIntegerArray_Tstring_view_Tspan = frc::SendableBuilderImpl;
    
    using override_base_AddFloatArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstFloatArray_Tstring_view_Tspan = frc::SendableBuilderImpl;
    
    using override_base_AddDoubleArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstDoubleArray_Tstring_view_Tspan = frc::SendableBuilderImpl;
    
    using override_base_AddStringArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstStringArray_Tstring_view_Tspan = frc::SendableBuilderImpl;
    
    using override_base_AddRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_PublishConstRaw_Tstring_view_Tstring_view_Tspan = frc::SendableBuilderImpl;
    
    using override_base_AddSmallStringProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_AddSmallBooleanArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_AddSmallIntegerArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_AddSmallFloatArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_AddSmallDoubleArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_AddSmallStringArrayProperty_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
    using override_base_AddSmallRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction = frc::SendableBuilderImpl;
    
};




template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc__SendableBuilderImpl =

    PyTrampoline_nt__NTSendableBuilder<

        PyTrampolineBase

        
        , PyTrampolineCfg
    >

;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__SendableBuilderImpl : PyTrampolineBase_frc__SendableBuilderImpl<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc__SendableBuilderImpl<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc__SendableBuilderImpl;











    
    
#ifndef RPYGEN_DISABLE_GetTable_v
    std::shared_ptr<nt::NetworkTable> GetTable() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_GetTable_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(std::shared_ptr<nt::NetworkTable>), LookupBase,
            "getTable", );
        return CxxCallBase::GetTable();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KIsPublished_v
    bool IsPublished() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KIsPublished_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
            "isPublished", );
        return CxxCallBase::IsPublished();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_Update_v
    void Update() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_Update_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "update", );
        return CxxCallBase::Update();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_ClearProperties_v
    void ClearProperties() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_ClearProperties_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "clearProperties", );
        return CxxCallBase::ClearProperties();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetSmartDashboardType_Tstring_view
    void SetSmartDashboardType(std::string_view type) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetSmartDashboardType_Tstring_view;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setSmartDashboardType", type);
        return CxxCallBase::SetSmartDashboardType(std::move(type));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetActuator_b
    void SetActuator(bool value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetActuator_b;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setActuator", value);
        return CxxCallBase::SetActuator(std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetSafeState_Tfunction
    void SetSafeState(std::function<void ()> func) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetSafeState_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setSafeState", func);
        return CxxCallBase::SetSafeState(std::move(func));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetUpdateTable_Tunique_function
    void SetUpdateTable(wpi::unique_function<void ()> func) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetUpdateTable_Tunique_function;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setUpdateTable", func);
        return CxxCallBase::SetUpdateTable(std::move(func));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_GetTopic_Tstring_view
    nt::Topic GetTopic(std::string_view key) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_GetTopic_Tstring_view;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(nt::Topic), LookupBase,
            "getTopic", key);
        return CxxCallBase::GetTopic(std::move(key));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddBooleanProperty_Tstring_view_Tfunction_Tfunction
    void AddBooleanProperty(std::string_view key, std::function<bool ()> getter, std::function<void (bool)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddBooleanProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addBooleanProperty", key, getter, setter);
        return CxxCallBase::AddBooleanProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstBoolean_Tstring_view_b
    void PublishConstBoolean(std::string_view key, bool value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstBoolean_Tstring_view_b;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstBoolean", key, value);
        return CxxCallBase::PublishConstBoolean(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddIntegerProperty_Tstring_view_Tfunction_Tfunction
    void AddIntegerProperty(std::string_view key, std::function<int64_t ()> getter, std::function<void (int64_t)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddIntegerProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addIntegerProperty", key, getter, setter);
        return CxxCallBase::AddIntegerProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstInteger_Tstring_view_x
    void PublishConstInteger(std::string_view key, int64_t value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstInteger_Tstring_view_x;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstInteger", key, value);
        return CxxCallBase::PublishConstInteger(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddFloatProperty_Tstring_view_Tfunction_Tfunction
    void AddFloatProperty(std::string_view key, std::function<float ()> getter, std::function<void (float)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddFloatProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addFloatProperty", key, getter, setter);
        return CxxCallBase::AddFloatProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstFloat_Tstring_view_f
    void PublishConstFloat(std::string_view key, float value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstFloat_Tstring_view_f;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstFloat", key, value);
        return CxxCallBase::PublishConstFloat(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddDoubleProperty_Tstring_view_Tfunction_Tfunction
    void AddDoubleProperty(std::string_view key, std::function<double ()> getter, std::function<void (double)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddDoubleProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addDoubleProperty", key, getter, setter);
        return CxxCallBase::AddDoubleProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstDouble_Tstring_view_d
    void PublishConstDouble(std::string_view key, double value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstDouble_Tstring_view_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstDouble", key, value);
        return CxxCallBase::PublishConstDouble(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddStringProperty_Tstring_view_Tfunction_Tfunction
    void AddStringProperty(std::string_view key, std::function<std::string ()> getter, std::function<void (std::string_view)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddStringProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addStringProperty", key, getter, setter);
        return CxxCallBase::AddStringProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstString_Tstring_view_Tstring_view
    void PublishConstString(std::string_view key, std::string_view value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstString_Tstring_view_Tstring_view;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstString", key, value);
        return CxxCallBase::PublishConstString(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddBooleanArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddBooleanArrayProperty(std::string_view key, std::function<std::vector<int> ()> getter, std::function<void (std::span<const int>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddBooleanArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addBooleanArrayProperty", key, getter, setter);
        return CxxCallBase::AddBooleanArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstBooleanArray_Tstring_view_Tspan
    void PublishConstBooleanArray(std::string_view key, std::span<const int> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstBooleanArray_Tstring_view_Tspan;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstBooleanArray", key, value);
        return CxxCallBase::PublishConstBooleanArray(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddIntegerArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddIntegerArrayProperty(std::string_view key, std::function<std::vector<int64_t> ()> getter, std::function<void (std::span<const int64_t>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddIntegerArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addIntegerArrayProperty", key, getter, setter);
        return CxxCallBase::AddIntegerArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstIntegerArray_Tstring_view_Tspan
    void PublishConstIntegerArray(std::string_view key, std::span<const int64_t> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstIntegerArray_Tstring_view_Tspan;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstIntegerArray", key, value);
        return CxxCallBase::PublishConstIntegerArray(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddFloatArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddFloatArrayProperty(std::string_view key, std::function<std::vector<float> ()> getter, std::function<void (std::span<const float>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddFloatArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addFloatArrayProperty", key, getter, setter);
        return CxxCallBase::AddFloatArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstFloatArray_Tstring_view_Tspan
    void PublishConstFloatArray(std::string_view key, std::span<const float> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstFloatArray_Tstring_view_Tspan;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstFloatArray", key, value);
        return CxxCallBase::PublishConstFloatArray(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddDoubleArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddDoubleArrayProperty(std::string_view key, std::function<std::vector<double> ()> getter, std::function<void (std::span<const double>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddDoubleArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addDoubleArrayProperty", key, getter, setter);
        return CxxCallBase::AddDoubleArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstDoubleArray_Tstring_view_Tspan
    void PublishConstDoubleArray(std::string_view key, std::span<const double> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstDoubleArray_Tstring_view_Tspan;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstDoubleArray", key, value);
        return CxxCallBase::PublishConstDoubleArray(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddStringArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddStringArrayProperty(std::string_view key, std::function<std::vector<std::string> ()> getter, std::function<void (std::span<const std::string>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddStringArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addStringArrayProperty", key, getter, setter);
        return CxxCallBase::AddStringArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstStringArray_Tstring_view_Tspan
    void PublishConstStringArray(std::string_view key, std::span<const std::string> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstStringArray_Tstring_view_Tspan;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstStringArray", key, value);
        return CxxCallBase::PublishConstStringArray(std::move(key), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction
    void AddRawProperty(std::string_view key, std::string_view typeString, std::function<std::vector<uint8_t> ()> getter, std::function<void (std::span<const uint8_t>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addRawProperty", key, typeString, getter, setter);
        return CxxCallBase::AddRawProperty(std::move(key), std::move(typeString), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_PublishConstRaw_Tstring_view_Tstring_view_Tspan
    void PublishConstRaw(std::string_view key, std::string_view typeString, std::span<const uint8_t> value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_PublishConstRaw_Tstring_view_Tstring_view_Tspan;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "publishConstRaw", key, typeString, value);
        return CxxCallBase::PublishConstRaw(std::move(key), std::move(typeString), std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallStringProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallStringProperty(std::string_view key, std::function<std::string_view (wpi::SmallVectorImpl<char>& buf)> getter, std::function<void (std::string_view)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddSmallStringProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addSmallStringProperty", key, getter, setter);
        return CxxCallBase::AddSmallStringProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallBooleanArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallBooleanArrayProperty(std::string_view key, std::function<std::span<const int> (wpi::SmallVectorImpl<int>& buf)> getter, std::function<void (std::span<const int>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddSmallBooleanArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addSmallBooleanArrayProperty", key, getter, setter);
        return CxxCallBase::AddSmallBooleanArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallIntegerArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallIntegerArrayProperty(std::string_view key, std::function<std::span<const int64_t> (wpi::SmallVectorImpl<int64_t>& buf)> getter, std::function<void (std::span<const int64_t>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddSmallIntegerArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addSmallIntegerArrayProperty", key, getter, setter);
        return CxxCallBase::AddSmallIntegerArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallFloatArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallFloatArrayProperty(std::string_view key, std::function<std::span<const float> (wpi::SmallVectorImpl<float>& buf)> getter, std::function<void (std::span<const float>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddSmallFloatArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addSmallFloatArrayProperty", key, getter, setter);
        return CxxCallBase::AddSmallFloatArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallDoubleArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallDoubleArrayProperty(std::string_view key, std::function<std::span<const double> (wpi::SmallVectorImpl<double>& buf)> getter, std::function<void (std::span<const double>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddSmallDoubleArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addSmallDoubleArrayProperty", key, getter, setter);
        return CxxCallBase::AddSmallDoubleArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallStringArrayProperty_Tstring_view_Tfunction_Tfunction
    void AddSmallStringArrayProperty(std::string_view key, std::function<std::span<const std::string> (wpi::SmallVectorImpl<std::string>& buf)> getter, std::function<void (std::span<const std::string>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddSmallStringArrayProperty_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addSmallStringArrayProperty", key, getter, setter);
        return CxxCallBase::AddSmallStringArrayProperty(std::move(key), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_AddSmallRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction
    void AddSmallRawProperty(std::string_view key, std::string_view typeString, std::function<std::span<uint8_t> (wpi::SmallVectorImpl<uint8_t>& buf)> getter, std::function<void (std::span<const uint8_t>)> setter) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_AddSmallRawProperty_Tstring_view_Tstring_view_Tfunction_Tfunction;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "addSmallRawProperty", key, typeString, getter, setter);
        return CxxCallBase::AddSmallRawProperty(std::move(key), std::move(typeString), std::move(getter), std::move(setter));
    
    
    
    }
#endif

    

    
    

    

    
};

}; // namespace rpygen


