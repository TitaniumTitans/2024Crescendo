

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <frc\motorcontrol\PWMMotorController.h>


#include <wpi/sendable/SendableBuilder.h>

#include <frc/DMA.h>









#include <rpygen/frc__MotorController.hpp>

#include <rpygen/frc__MotorSafety.hpp>

#include <rpygen/wpi__Sendable.hpp>



namespace rpygen {


using namespace frc;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__PWMMotorController :


    PyTrampolineCfg_frc__MotorController<

    PyTrampolineCfg_frc__MotorSafety<

    PyTrampolineCfg_wpi__Sendable<

CfgBase
>>>

{
    using Base = frc::PWMMotorController;

    
    
    using override_base_Set_d = frc::PWMMotorController;
    
    using override_base_SetVoltage_Tvolt_t = frc::PWMMotorController;
    
    using override_base_KGet_v = frc::PWMMotorController;
    
    using override_base_SetInverted_b = frc::PWMMotorController;
    
    using override_base_KGetInverted_v = frc::PWMMotorController;
    
    using override_base_Disable_v = frc::PWMMotorController;
    
    using override_base_StopMotor_v = frc::PWMMotorController;
    
    using override_base_KGetDescription_v = frc::PWMMotorController;
    
    using override_base_InitSendable_RTSendableBuilder = frc::PWMMotorController;
    
};




template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc__PWMMotorController =

    PyTrampoline_frc__MotorController<

    PyTrampoline_frc__MotorSafety<

    PyTrampoline_wpi__Sendable<

        PyTrampolineBase

        
        , PyTrampolineCfg
    >

        
        , PyTrampolineCfg
    >

        
        , PyTrampolineCfg
    >

;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__PWMMotorController : PyTrampolineBase_frc__PWMMotorController<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc__PWMMotorController<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc__PWMMotorController;










#ifdef RPYGEN_ENABLE_frc__PWMMotorController_PROTECTED_CONSTRUCTORS
    PyTrampoline_frc__PWMMotorController(std::string_view name, int channel) :
        PyTrampolineBase_frc__PWMMotorController<PyTrampolineBase, PyTrampolineCfg>(name, channel)
    {}
#endif


    
    
#ifndef RPYGEN_DISABLE_Set_d
    void Set(double value) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_Set_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "set", value);
        return CxxCallBase::Set(std::move(value));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetVoltage_Tvolt_t
    void SetVoltage(units::volt_t output) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetVoltage_Tvolt_t;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setVoltage", output);
        return CxxCallBase::SetVoltage(std::move(output));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGet_v
    double Get() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGet_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "get", );
        return CxxCallBase::Get();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetInverted_b;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setInverted", isInverted);
        return CxxCallBase::SetInverted(std::move(isInverted));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetInverted_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
            "getInverted", );
        return CxxCallBase::GetInverted();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_Disable_v
    void Disable() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_Disable_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "disable", );
        return CxxCallBase::Disable();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_StopMotor_v
    void StopMotor() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_StopMotor_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "stopMotor", );
        return CxxCallBase::StopMotor();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetDescription_v
    std::string GetDescription() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetDescription_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(std::string), LookupBase,
            "getDescription", );
        return CxxCallBase::GetDescription();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "_initSendable", builder);
        return CxxCallBase::InitSendable(std::forward<decltype(builder)>(builder));
    
    
    
    }
#endif

    

    
    

    
    using frc::PWMMotorController::m_pwm;
    

    
};

}; // namespace rpygen


