

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <frc\PneumaticsBase.h>


#include <wpi/sendable/SendableBuilder.h>

#include <frc/Compressor.h>

#include <frc/Solenoid.h>

#include <frc/DoubleSolenoid.h>









namespace rpygen {


using namespace frc;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__PneumaticsBase :

    CfgBase

{
    using Base = frc::PneumaticsBase;

    
    
    using override_base_KGetCompressor_v = frc::PneumaticsBase;
    
    using override_base_KGetPressureSwitch_v = frc::PneumaticsBase;
    
    using override_base_KGetCompressorCurrent_v = frc::PneumaticsBase;
    
    using override_base_DisableCompressor_v = frc::PneumaticsBase;
    
    using override_base_EnableCompressorDigital_v = frc::PneumaticsBase;
    
    using override_base_EnableCompressorAnalog_Tpounds_per_square_inch_t_Tpounds_per_square_inch_t = frc::PneumaticsBase;
    
    using override_base_EnableCompressorHybrid_Tpounds_per_square_inch_t_Tpounds_per_square_inch_t = frc::PneumaticsBase;
    
    using override_base_KGetCompressorConfigType_v = frc::PneumaticsBase;
    
    using override_base_SetSolenoids_i_i = frc::PneumaticsBase;
    
    using override_base_KGetSolenoids_v = frc::PneumaticsBase;
    
    using override_base_KGetModuleNumber_v = frc::PneumaticsBase;
    
    using override_base_KGetSolenoidDisabledList_v = frc::PneumaticsBase;
    
    using override_base_FireOneShot_i = frc::PneumaticsBase;
    
    using override_base_SetOneShotDuration_i_Tsecond_t = frc::PneumaticsBase;
    
    using override_base_KCheckSolenoidChannel_i = frc::PneumaticsBase;
    
    using override_base_CheckAndReserveSolenoids_i = frc::PneumaticsBase;
    
    using override_base_UnreserveSolenoids_i = frc::PneumaticsBase;
    
    using override_base_ReserveCompressor_v = frc::PneumaticsBase;
    
    using override_base_UnreserveCompressor_v = frc::PneumaticsBase;
    
    using override_base_KGetAnalogVoltage_i = frc::PneumaticsBase;
    
    using override_base_KGetPressure_i = frc::PneumaticsBase;
    
    using override_base_MakeSolenoid_i = frc::PneumaticsBase;
    
    using override_base_MakeDoubleSolenoid_i_i = frc::PneumaticsBase;
    
    using override_base_MakeCompressor_v = frc::PneumaticsBase;
    
};



template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__PneumaticsBase : PyTrampolineBase, virtual py::trampoline_self_life_support {
    using PyTrampolineBase::PyTrampolineBase;











    
    
#ifndef RPYGEN_DISABLE_KGetCompressor_v
    bool GetCompressor() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(bool), LookupBase,
            "getCompressor", GetCompressor, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetPressureSwitch_v
    bool GetPressureSwitch() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(bool), LookupBase,
            "getPressureSwitch", GetPressureSwitch, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetCompressorCurrent_v
    units::ampere_t GetCompressorCurrent() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(units::ampere_t), LookupBase,
            "getCompressorCurrent", GetCompressorCurrent, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_DisableCompressor_v
    void DisableCompressor() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(void), LookupBase,
            "disableCompressor", DisableCompressor, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_EnableCompressorDigital_v
    void EnableCompressorDigital() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(void), LookupBase,
            "enableCompressorDigital", EnableCompressorDigital, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_EnableCompressorAnalog_Tpounds_per_square_inch_t_Tpounds_per_square_inch_t
    void EnableCompressorAnalog(units::pounds_per_square_inch_t minPressure, units::pounds_per_square_inch_t maxPressure) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(void), LookupBase,
            "enableCompressorAnalog", EnableCompressorAnalog, minPressure, maxPressure);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_EnableCompressorHybrid_Tpounds_per_square_inch_t_Tpounds_per_square_inch_t
    void EnableCompressorHybrid(units::pounds_per_square_inch_t minPressure, units::pounds_per_square_inch_t maxPressure) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(void), LookupBase,
            "enableCompressorHybrid", EnableCompressorHybrid, minPressure, maxPressure);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetCompressorConfigType_v
    CompressorConfigType GetCompressorConfigType() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(CompressorConfigType), LookupBase,
            "getCompressorConfigType", GetCompressorConfigType, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetSolenoids_i_i
    void SetSolenoids(int mask, int values) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(void), LookupBase,
            "setSolenoids", SetSolenoids, mask, values);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetSolenoids_v
    int GetSolenoids() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(int), LookupBase,
            "getSolenoids", GetSolenoids, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetModuleNumber_v
    int GetModuleNumber() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(int), LookupBase,
            "getModuleNumber", GetModuleNumber, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetSolenoidDisabledList_v
    int GetSolenoidDisabledList() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(int), LookupBase,
            "getSolenoidDisabledList", GetSolenoidDisabledList, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_FireOneShot_i
    void FireOneShot(int index) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(void), LookupBase,
            "fireOneShot", FireOneShot, index);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetOneShotDuration_i_Tsecond_t
    void SetOneShotDuration(int index, units::second_t duration) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(void), LookupBase,
            "setOneShotDuration", SetOneShotDuration, index, duration);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KCheckSolenoidChannel_i
    bool CheckSolenoidChannel(int channel) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(bool), LookupBase,
            "checkSolenoidChannel", CheckSolenoidChannel, channel);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_CheckAndReserveSolenoids_i
    int CheckAndReserveSolenoids(int mask) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(int), LookupBase,
            "checkAndReserveSolenoids", CheckAndReserveSolenoids, mask);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_UnreserveSolenoids_i
    void UnreserveSolenoids(int mask) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(void), LookupBase,
            "unreserveSolenoids", UnreserveSolenoids, mask);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_ReserveCompressor_v
    bool ReserveCompressor() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(bool), LookupBase,
            "reserveCompressor", ReserveCompressor, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_UnreserveCompressor_v
    void UnreserveCompressor() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(void), LookupBase,
            "unreserveCompressor", UnreserveCompressor, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetAnalogVoltage_i
    units::volt_t GetAnalogVoltage(int channel) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(units::volt_t), LookupBase,
            "getAnalogVoltage", GetAnalogVoltage, channel);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetPressure_i
    units::pounds_per_square_inch_t GetPressure(int channel) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(units::pounds_per_square_inch_t), LookupBase,
            "getPressure", GetPressure, channel);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_MakeSolenoid_i
    Solenoid MakeSolenoid(int channel) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(Solenoid), LookupBase,
            "makeSolenoid", MakeSolenoid, channel);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_MakeDoubleSolenoid_i_i
    DoubleSolenoid MakeDoubleSolenoid(int forwardChannel, int reverseChannel) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(DoubleSolenoid), LookupBase,
            "makeDoubleSolenoid", MakeDoubleSolenoid, forwardChannel, reverseChannel);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_MakeCompressor_v
    Compressor MakeCompressor() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBase, PYBIND11_TYPE(Compressor), LookupBase,
            "makeCompressor", MakeCompressor, );
    
    
    
    }
#endif

    

    
    

    

    
};

}; // namespace rpygen


