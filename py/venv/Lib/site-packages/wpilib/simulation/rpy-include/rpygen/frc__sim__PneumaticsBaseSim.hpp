

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <frc\simulation\PneumaticsBaseSim.h>










namespace rpygen {


using namespace frc::sim;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__sim__PneumaticsBaseSim :

    CfgBase

{
    using Base = frc::sim::PneumaticsBaseSim;

    
    
    using override_base_KGetInitialized_v = frc::sim::PneumaticsBaseSim;
    
    using override_base_SetInitialized_b = frc::sim::PneumaticsBaseSim;
    
    using override_base_RegisterInitializedCallback_TNotifyCallback_b = frc::sim::PneumaticsBaseSim;
    
    using override_base_KGetCompressorOn_v = frc::sim::PneumaticsBaseSim;
    
    using override_base_SetCompressorOn_b = frc::sim::PneumaticsBaseSim;
    
    using override_base_RegisterCompressorOnCallback_TNotifyCallback_b = frc::sim::PneumaticsBaseSim;
    
    using override_base_KGetSolenoidOutput_i = frc::sim::PneumaticsBaseSim;
    
    using override_base_SetSolenoidOutput_i_b = frc::sim::PneumaticsBaseSim;
    
    using override_base_RegisterSolenoidOutputCallback_i_TNotifyCallback_b = frc::sim::PneumaticsBaseSim;
    
    using override_base_KGetPressureSwitch_v = frc::sim::PneumaticsBaseSim;
    
    using override_base_SetPressureSwitch_b = frc::sim::PneumaticsBaseSim;
    
    using override_base_RegisterPressureSwitchCallback_TNotifyCallback_b = frc::sim::PneumaticsBaseSim;
    
    using override_base_KGetCompressorCurrent_v = frc::sim::PneumaticsBaseSim;
    
    using override_base_SetCompressorCurrent_d = frc::sim::PneumaticsBaseSim;
    
    using override_base_RegisterCompressorCurrentCallback_TNotifyCallback_b = frc::sim::PneumaticsBaseSim;
    
    using override_base_KGetAllSolenoidOutputs_v = frc::sim::PneumaticsBaseSim;
    
    using override_base_SetAllSolenoidOutputs_c = frc::sim::PneumaticsBaseSim;
    
    using override_base_ResetData_v = frc::sim::PneumaticsBaseSim;
    
};



template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__sim__PneumaticsBaseSim : PyTrampolineBase, virtual py::trampoline_self_life_support {
    using PyTrampolineBase::PyTrampolineBase;





    using PneumaticsBase = frc::PneumaticsBase;






#ifdef RPYGEN_ENABLE_frc__sim__PneumaticsBaseSim_PROTECTED_CONSTRUCTORS
    PyTrampoline_frc__sim__PneumaticsBaseSim(const int index) :
        PyTrampolineBase(index)
    {}
#endif

#ifdef RPYGEN_ENABLE_frc__sim__PneumaticsBaseSim_PROTECTED_CONSTRUCTORS
    PyTrampoline_frc__sim__PneumaticsBaseSim(const PneumaticsBase& module) :
        PyTrampolineBase(module)
    {}
#endif


    
    
#ifndef RPYGEN_DISABLE_KGetInitialized_v
    bool GetInitialized() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(bool), LookupBase,
            "getInitialized", GetInitialized, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetInitialized_b
    void SetInitialized(bool initialized) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(void), LookupBase,
            "setInitialized", SetInitialized, initialized);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_RegisterInitializedCallback_TNotifyCallback_b
    std::unique_ptr<CallbackStore> RegisterInitializedCallback(NotifyCallback callback, bool initialNotify) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(std::unique_ptr<CallbackStore>), LookupBase,
            "registerInitializedCallback", RegisterInitializedCallback, callback, initialNotify);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetCompressorOn_v
    bool GetCompressorOn() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(bool), LookupBase,
            "getCompressorOn", GetCompressorOn, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetCompressorOn_b
    void SetCompressorOn(bool compressorOn) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(void), LookupBase,
            "setCompressorOn", SetCompressorOn, compressorOn);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_RegisterCompressorOnCallback_TNotifyCallback_b
    std::unique_ptr<CallbackStore> RegisterCompressorOnCallback(NotifyCallback callback, bool initialNotify) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(std::unique_ptr<CallbackStore>), LookupBase,
            "registerCompressorOnCallback", RegisterCompressorOnCallback, callback, initialNotify);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetSolenoidOutput_i
    bool GetSolenoidOutput(int channel) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(bool), LookupBase,
            "getSolenoidOutput", GetSolenoidOutput, channel);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetSolenoidOutput_i_b
    void SetSolenoidOutput(int channel, bool solenoidOutput) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(void), LookupBase,
            "setSolenoidOutput", SetSolenoidOutput, channel, solenoidOutput);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_RegisterSolenoidOutputCallback_i_TNotifyCallback_b
    std::unique_ptr<CallbackStore> RegisterSolenoidOutputCallback(int channel, NotifyCallback callback, bool initialNotify) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(std::unique_ptr<CallbackStore>), LookupBase,
            "registerSolenoidOutputCallback", RegisterSolenoidOutputCallback, channel, callback, initialNotify);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetPressureSwitch_v
    bool GetPressureSwitch() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(bool), LookupBase,
            "getPressureSwitch", GetPressureSwitch, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetPressureSwitch_b
    void SetPressureSwitch(bool pressureSwitch) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(void), LookupBase,
            "setPressureSwitch", SetPressureSwitch, pressureSwitch);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_RegisterPressureSwitchCallback_TNotifyCallback_b
    std::unique_ptr<CallbackStore> RegisterPressureSwitchCallback(NotifyCallback callback, bool initialNotify) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(std::unique_ptr<CallbackStore>), LookupBase,
            "registerPressureSwitchCallback", RegisterPressureSwitchCallback, callback, initialNotify);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetCompressorCurrent_v
    double GetCompressorCurrent() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(double), LookupBase,
            "getCompressorCurrent", GetCompressorCurrent, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetCompressorCurrent_d
    void SetCompressorCurrent(double compressorCurrent) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(void), LookupBase,
            "setCompressorCurrent", SetCompressorCurrent, compressorCurrent);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_RegisterCompressorCurrentCallback_TNotifyCallback_b
    std::unique_ptr<CallbackStore> RegisterCompressorCurrentCallback(NotifyCallback callback, bool initialNotify) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(std::unique_ptr<CallbackStore>), LookupBase,
            "registerCompressorCurrentCallback", RegisterCompressorCurrentCallback, callback, initialNotify);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetAllSolenoidOutputs_v
    uint8_t GetAllSolenoidOutputs() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(uint8_t), LookupBase,
            "getAllSolenoidOutputs", GetAllSolenoidOutputs, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetAllSolenoidOutputs_c
    void SetAllSolenoidOutputs(uint8_t outputs) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(void), LookupBase,
            "setAllSolenoidOutputs", SetAllSolenoidOutputs, outputs);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_ResetData_v
    void ResetData() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(PneumaticsBaseSim, PYBIND11_TYPE(void), LookupBase,
            "resetData", ResetData, );
    
    
    
    }
#endif

    

    
    

    
    using frc::sim::PneumaticsBaseSim::m_index;
    

    
};

}; // namespace rpygen


