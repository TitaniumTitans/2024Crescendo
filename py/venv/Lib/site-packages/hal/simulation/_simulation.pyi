from __future__ import annotations
import hal._wpiHal
import typing
__all__ = ['AnalogTriggerMode', 'NotifierInfo', 'SimCB', 'cancelAccelerometerActiveCallback', 'cancelAccelerometerRangeCallback', 'cancelAccelerometerXCallback', 'cancelAccelerometerYCallback', 'cancelAccelerometerZCallback', 'cancelAddressableLEDDataCallback', 'cancelAddressableLEDInitializedCallback', 'cancelAddressableLEDLengthCallback', 'cancelAddressableLEDOutputPortCallback', 'cancelAddressableLEDRunningCallback', 'cancelAllSimPeriodicCallbacks', 'cancelAnalogGyroAngleCallback', 'cancelAnalogGyroInitializedCallback', 'cancelAnalogGyroRateCallback', 'cancelAnalogInAccumulatorCenterCallback', 'cancelAnalogInAccumulatorCountCallback', 'cancelAnalogInAccumulatorDeadbandCallback', 'cancelAnalogInAccumulatorInitializedCallback', 'cancelAnalogInAccumulatorValueCallback', 'cancelAnalogInAverageBitsCallback', 'cancelAnalogInInitializedCallback', 'cancelAnalogInOversampleBitsCallback', 'cancelAnalogInVoltageCallback', 'cancelAnalogOutInitializedCallback', 'cancelAnalogOutVoltageCallback', 'cancelAnalogTriggerInitializedCallback', 'cancelAnalogTriggerTriggerLowerBoundCallback', 'cancelAnalogTriggerTriggerModeCallback', 'cancelAnalogTriggerTriggerUpperBoundCallback', 'cancelCTREPCMClosedLoopEnabledCallback', 'cancelCTREPCMCompressorCurrentCallback', 'cancelCTREPCMCompressorOnCallback', 'cancelCTREPCMInitializedCallback', 'cancelCTREPCMPressureSwitchCallback', 'cancelCTREPCMSolenoidOutputCallback', 'cancelDIOFilterIndexCallback', 'cancelDIOInitializedCallback', 'cancelDIOIsInputCallback', 'cancelDIOPulseLengthCallback', 'cancelDIOValueCallback', 'cancelDigitalPWMDutyCycleCallback', 'cancelDigitalPWMInitializedCallback', 'cancelDigitalPWMPinCallback', 'cancelDriverStationAllianceStationIdCallback', 'cancelDriverStationAutonomousCallback', 'cancelDriverStationDsAttachedCallback', 'cancelDriverStationEStopCallback', 'cancelDriverStationEnabledCallback', 'cancelDriverStationFmsAttachedCallback', 'cancelDriverStationMatchTimeCallback', 'cancelDriverStationNewDataCallback', 'cancelDriverStationTestCallback', 'cancelDutyCycleFrequencyCallback', 'cancelDutyCycleInitializedCallback', 'cancelDutyCycleOutputCallback', 'cancelEncoderCountCallback', 'cancelEncoderDirectionCallback', 'cancelEncoderDistancePerPulseCallback', 'cancelEncoderInitializedCallback', 'cancelEncoderMaxPeriodCallback', 'cancelEncoderPeriodCallback', 'cancelEncoderResetCallback', 'cancelEncoderReverseDirectionCallback', 'cancelEncoderSamplesToAverageCallback', 'cancelJoystickAxesCallback', 'cancelJoystickButtonsCallback', 'cancelJoystickDescriptorCallback', 'cancelJoystickOutputsCallback', 'cancelJoystickPOVsCallback', 'cancelMatchInfoCallback', 'cancelPWMInitializedCallback', 'cancelPWMPeriodScaleCallback', 'cancelPWMPositionCallback', 'cancelPWMSpeedCallback', 'cancelPWMZeroLatchCallback', 'cancelPowerDistributionCurrentCallback', 'cancelPowerDistributionInitializedCallback', 'cancelPowerDistributionTemperatureCallback', 'cancelPowerDistributionVoltageCallback', 'cancelREVPHCompressorConfigTypeCallback', 'cancelREVPHCompressorCurrentCallback', 'cancelREVPHCompressorOnCallback', 'cancelREVPHInitializedCallback', 'cancelREVPHPressureSwitchCallback', 'cancelREVPHSolenoidOutputCallback', 'cancelRelayForwardCallback', 'cancelRelayInitializedForwardCallback', 'cancelRelayInitializedReverseCallback', 'cancelRelayReverseCallback', 'cancelRoboRioBrownoutVoltageCallback', 'cancelRoboRioCPUTempCallback', 'cancelRoboRioCommentsCallback', 'cancelRoboRioFPGAButtonCallback', 'cancelRoboRioRadioLEDStateCallback', 'cancelRoboRioSerialNumberCallback', 'cancelRoboRioTeamNumberCallback', 'cancelRoboRioUserActive3V3Callback', 'cancelRoboRioUserActive5VCallback', 'cancelRoboRioUserActive6VCallback', 'cancelRoboRioUserCurrent3V3Callback', 'cancelRoboRioUserCurrent5VCallback', 'cancelRoboRioUserCurrent6VCallback', 'cancelRoboRioUserFaults3V3Callback', 'cancelRoboRioUserFaults5VCallback', 'cancelRoboRioUserFaults6VCallback', 'cancelRoboRioUserVoltage3V3Callback', 'cancelRoboRioUserVoltage5VCallback', 'cancelRoboRioUserVoltage6VCallback', 'cancelRoboRioVInCurrentCallback', 'cancelRoboRioVInVoltageCallback', 'cancelSPIAccelerometerActiveCallback', 'cancelSPIAccelerometerRangeCallback', 'cancelSPIAccelerometerXCallback', 'cancelSPIAccelerometerYCallback', 'cancelSPIAccelerometerZCallback', 'cancelSimDeviceCreatedCallback', 'cancelSimDeviceFreedCallback', 'cancelSimValueChangedCallback', 'cancelSimValueCreatedCallback', 'cancelSimValueResetCallback', 'findAddressableLEDForChannel', 'findAnalogTriggerForChannel', 'findDigitalPWMForChannel', 'findDutyCycleForChannel', 'findEncoderForChannel', 'getAccelerometerActive', 'getAccelerometerRange', 'getAccelerometerX', 'getAccelerometerY', 'getAccelerometerZ', 'getAddressableLEDData', 'getAddressableLEDInitialized', 'getAddressableLEDLength', 'getAddressableLEDOutputPort', 'getAddressableLEDRunning', 'getAnalogGyroAngle', 'getAnalogGyroInitialized', 'getAnalogGyroRate', 'getAnalogInAccumulatorCenter', 'getAnalogInAccumulatorCount', 'getAnalogInAccumulatorDeadband', 'getAnalogInAccumulatorInitialized', 'getAnalogInAccumulatorValue', 'getAnalogInAverageBits', 'getAnalogInInitialized', 'getAnalogInOversampleBits', 'getAnalogInSimDevice', 'getAnalogInVoltage', 'getAnalogOutInitialized', 'getAnalogOutVoltage', 'getAnalogTriggerInitialized', 'getAnalogTriggerTriggerLowerBound', 'getAnalogTriggerTriggerMode', 'getAnalogTriggerTriggerUpperBound', 'getCTREPCMAllSolenoids', 'getCTREPCMClosedLoopEnabled', 'getCTREPCMCompressorCurrent', 'getCTREPCMCompressorOn', 'getCTREPCMInitialized', 'getCTREPCMPressureSwitch', 'getCTREPCMSolenoidOutput', 'getDIOFilterIndex', 'getDIOInitialized', 'getDIOIsInput', 'getDIOPulseLength', 'getDIOSimDevice', 'getDIOValue', 'getDigitalPWMDutyCycle', 'getDigitalPWMInitialized', 'getDigitalPWMPin', 'getDriverStationAllianceStationId', 'getDriverStationAutonomous', 'getDriverStationDsAttached', 'getDriverStationEStop', 'getDriverStationEnabled', 'getDriverStationFmsAttached', 'getDriverStationMatchTime', 'getDriverStationTest', 'getDutyCycleDigitalChannel', 'getDutyCycleFrequency', 'getDutyCycleInitialized', 'getDutyCycleOutput', 'getDutyCycleSimDevice', 'getEncoderCount', 'getEncoderDigitalChannelA', 'getEncoderDigitalChannelB', 'getEncoderDirection', 'getEncoderDistance', 'getEncoderDistancePerPulse', 'getEncoderInitialized', 'getEncoderMaxPeriod', 'getEncoderPeriod', 'getEncoderRate', 'getEncoderReset', 'getEncoderReverseDirection', 'getEncoderSamplesToAverage', 'getEncoderSimDevice', 'getJoystickAxes', 'getJoystickButtons', 'getJoystickCounts', 'getJoystickDescriptor', 'getJoystickOutputs', 'getJoystickPOVs', 'getMatchInfo', 'getNextNotifierTimeout', 'getNotifierInfo', 'getNumNotifiers', 'getPWMInitialized', 'getPWMPeriodScale', 'getPWMPosition', 'getPWMPulseMicrosecond', 'getPWMSpeed', 'getPWMZeroLatch', 'getPowerDistributionAllCurrents', 'getPowerDistributionCurrent', 'getPowerDistributionInitialized', 'getPowerDistributionTemperature', 'getPowerDistributionVoltage', 'getProgramStarted', 'getREVPHAllSolenoids', 'getREVPHCompressorConfigType', 'getREVPHCompressorCurrent', 'getREVPHCompressorOn', 'getREVPHInitialized', 'getREVPHPressureSwitch', 'getREVPHSolenoidOutput', 'getRelayForward', 'getRelayInitializedForward', 'getRelayInitializedReverse', 'getRelayReverse', 'getRoboRioBrownoutVoltage', 'getRoboRioCPUTemp', 'getRoboRioComments', 'getRoboRioFPGAButton', 'getRoboRioRadioLEDState', 'getRoboRioSerialNumber', 'getRoboRioTeamNumber', 'getRoboRioUserActive3V3', 'getRoboRioUserActive5V', 'getRoboRioUserActive6V', 'getRoboRioUserCurrent3V3', 'getRoboRioUserCurrent5V', 'getRoboRioUserCurrent6V', 'getRoboRioUserFaults3V3', 'getRoboRioUserFaults5V', 'getRoboRioUserFaults6V', 'getRoboRioUserVoltage3V3', 'getRoboRioUserVoltage5V', 'getRoboRioUserVoltage6V', 'getRoboRioVInCurrent', 'getRoboRioVInVoltage', 'getSPIAccelerometerActive', 'getSPIAccelerometerRange', 'getSPIAccelerometerX', 'getSPIAccelerometerY', 'getSPIAccelerometerZ', 'getSimDeviceHandle', 'getSimDeviceName', 'getSimValueDeviceHandle', 'getSimValueHandle', 'isSimDeviceEnabled', 'isTimingPaused', 'notifyDriverStationNewData', 'pauseTiming', 'registerSimPeriodicAfterCallback', 'registerSimPeriodicBeforeCallback', 'resetAccelerometerData', 'resetAddressableLEDData', 'resetAllSimData', 'resetAnalogGyroData', 'resetAnalogInData', 'resetAnalogOutData', 'resetAnalogTriggerData', 'resetCTREPCMData', 'resetDIOData', 'resetDigitalPWMData', 'resetDriverStationData', 'resetDutyCycleData', 'resetEncoderData', 'resetGlobalHandles', 'resetPWMData', 'resetPowerDistributionData', 'resetREVPHData', 'resetRelayData', 'resetRoboRioData', 'resetSPIAccelerometerData', 'resetSimDeviceData', 'restartTiming', 'resumeTiming', 'setAccelerometerActive', 'setAccelerometerRange', 'setAccelerometerX', 'setAccelerometerY', 'setAccelerometerZ', 'setAddressableLEDData', 'setAddressableLEDInitialized', 'setAddressableLEDLength', 'setAddressableLEDOutputPort', 'setAddressableLEDRunning', 'setAnalogGyroAngle', 'setAnalogGyroInitialized', 'setAnalogGyroRate', 'setAnalogInAccumulatorCenter', 'setAnalogInAccumulatorCount', 'setAnalogInAccumulatorDeadband', 'setAnalogInAccumulatorInitialized', 'setAnalogInAccumulatorValue', 'setAnalogInAverageBits', 'setAnalogInInitialized', 'setAnalogInOversampleBits', 'setAnalogInVoltage', 'setAnalogOutInitialized', 'setAnalogOutVoltage', 'setAnalogTriggerInitialized', 'setAnalogTriggerTriggerLowerBound', 'setAnalogTriggerTriggerMode', 'setAnalogTriggerTriggerUpperBound', 'setCTREPCMAllSolenoids', 'setCTREPCMClosedLoopEnabled', 'setCTREPCMCompressorCurrent', 'setCTREPCMCompressorOn', 'setCTREPCMInitialized', 'setCTREPCMPressureSwitch', 'setCTREPCMSolenoidOutput', 'setDIOFilterIndex', 'setDIOInitialized', 'setDIOIsInput', 'setDIOPulseLength', 'setDIOValue', 'setDigitalPWMDutyCycle', 'setDigitalPWMInitialized', 'setDigitalPWMPin', 'setDriverStationAllianceStationId', 'setDriverStationAutonomous', 'setDriverStationDsAttached', 'setDriverStationEStop', 'setDriverStationEnabled', 'setDriverStationFmsAttached', 'setDriverStationMatchTime', 'setDriverStationTest', 'setDutyCycleFrequency', 'setDutyCycleInitialized', 'setDutyCycleOutput', 'setEncoderCount', 'setEncoderDirection', 'setEncoderDistance', 'setEncoderDistancePerPulse', 'setEncoderInitialized', 'setEncoderMaxPeriod', 'setEncoderPeriod', 'setEncoderRate', 'setEncoderReset', 'setEncoderReverseDirection', 'setEncoderSamplesToAverage', 'setEventName', 'setGameSpecificMessage', 'setJoystickAxes', 'setJoystickAxis', 'setJoystickAxisCount', 'setJoystickAxisType', 'setJoystickButton', 'setJoystickButtonCount', 'setJoystickButtons', 'setJoystickButtonsValue', 'setJoystickDescriptor', 'setJoystickIsXbox', 'setJoystickName', 'setJoystickOutputs', 'setJoystickPOV', 'setJoystickPOVCount', 'setJoystickPOVs', 'setJoystickType', 'setMatchInfo', 'setMatchNumber', 'setMatchType', 'setPWMInitialized', 'setPWMPeriodScale', 'setPWMPosition', 'setPWMPulseMicrosecond', 'setPWMSpeed', 'setPWMZeroLatch', 'setPowerDistributionAllCurrents', 'setPowerDistributionCurrent', 'setPowerDistributionInitialized', 'setPowerDistributionTemperature', 'setPowerDistributionVoltage', 'setProgramStarted', 'setREVPHAllSolenoids', 'setREVPHCompressorConfigType', 'setREVPHCompressorCurrent', 'setREVPHCompressorOn', 'setREVPHInitialized', 'setREVPHPressureSwitch', 'setREVPHSolenoidOutput', 'setRelayForward', 'setRelayInitializedForward', 'setRelayInitializedReverse', 'setRelayReverse', 'setReplayNumber', 'setRoboRioBrownoutVoltage', 'setRoboRioCPUTemp', 'setRoboRioComments', 'setRoboRioFPGAButton', 'setRoboRioRadioLEDState', 'setRoboRioSerialNumber', 'setRoboRioTeamNumber', 'setRoboRioUserActive3V3', 'setRoboRioUserActive5V', 'setRoboRioUserActive6V', 'setRoboRioUserCurrent3V3', 'setRoboRioUserCurrent5V', 'setRoboRioUserCurrent6V', 'setRoboRioUserFaults3V3', 'setRoboRioUserFaults5V', 'setRoboRioUserFaults6V', 'setRoboRioUserVoltage3V3', 'setRoboRioUserVoltage5V', 'setRoboRioUserVoltage6V', 'setRoboRioVInCurrent', 'setRoboRioVInVoltage', 'setRuntimeType', 'setSPIAccelerometerActive', 'setSPIAccelerometerRange', 'setSPIAccelerometerX', 'setSPIAccelerometerY', 'setSPIAccelerometerZ', 'setSimDeviceEnabled', 'stepTiming', 'stepTimingAsync', 'waitForProgramStart']
class AnalogTriggerMode:
    """
    Members:
    
      HALSIM_AnalogTriggerUnassigned
    
      HALSIM_AnalogTriggerFiltered
    
      HALSIM_AnalogTriggerDutyCycle
    
      HALSIM_AnalogTriggerAveraged
    """
    HALSIM_AnalogTriggerAveraged: typing.ClassVar[AnalogTriggerMode]  # value = <AnalogTriggerMode.HALSIM_AnalogTriggerAveraged: 3>
    HALSIM_AnalogTriggerDutyCycle: typing.ClassVar[AnalogTriggerMode]  # value = <AnalogTriggerMode.HALSIM_AnalogTriggerDutyCycle: 2>
    HALSIM_AnalogTriggerFiltered: typing.ClassVar[AnalogTriggerMode]  # value = <AnalogTriggerMode.HALSIM_AnalogTriggerFiltered: 1>
    HALSIM_AnalogTriggerUnassigned: typing.ClassVar[AnalogTriggerMode]  # value = <AnalogTriggerMode.HALSIM_AnalogTriggerUnassigned: 0>
    __members__: typing.ClassVar[dict[str, AnalogTriggerMode]]  # value = {'HALSIM_AnalogTriggerUnassigned': <AnalogTriggerMode.HALSIM_AnalogTriggerUnassigned: 0>, 'HALSIM_AnalogTriggerFiltered': <AnalogTriggerMode.HALSIM_AnalogTriggerFiltered: 1>, 'HALSIM_AnalogTriggerDutyCycle': <AnalogTriggerMode.HALSIM_AnalogTriggerDutyCycle: 2>, 'HALSIM_AnalogTriggerAveraged': <AnalogTriggerMode.HALSIM_AnalogTriggerAveraged: 3>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class NotifierInfo:
    handle: int
    timeout: int
    waitTimeValid: int
    def __init__(self) -> None:
        ...
    @property
    def name(self) -> memoryview:
        ...
class SimCB:
    """
    Simulation callback handle
    """
    def cancel(self) -> None:
        """
        Cancel the callback
        """
def cancelAccelerometerActiveCallback(index: int, uid: int) -> None:
    ...
def cancelAccelerometerRangeCallback(index: int, uid: int) -> None:
    ...
def cancelAccelerometerXCallback(index: int, uid: int) -> None:
    ...
def cancelAccelerometerYCallback(index: int, uid: int) -> None:
    ...
def cancelAccelerometerZCallback(index: int, uid: int) -> None:
    ...
def cancelAddressableLEDDataCallback(index: int, uid: int) -> None:
    ...
def cancelAddressableLEDInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelAddressableLEDLengthCallback(index: int, uid: int) -> None:
    ...
def cancelAddressableLEDOutputPortCallback(index: int, uid: int) -> None:
    ...
def cancelAddressableLEDRunningCallback(index: int, uid: int) -> None:
    ...
def cancelAllSimPeriodicCallbacks() -> None:
    ...
def cancelAnalogGyroAngleCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogGyroInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogGyroRateCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogInAccumulatorCenterCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogInAccumulatorCountCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogInAccumulatorDeadbandCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogInAccumulatorInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogInAccumulatorValueCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogInAverageBitsCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogInInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogInOversampleBitsCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogInVoltageCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogOutInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogOutVoltageCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogTriggerInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogTriggerTriggerLowerBoundCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogTriggerTriggerModeCallback(index: int, uid: int) -> None:
    ...
def cancelAnalogTriggerTriggerUpperBoundCallback(index: int, uid: int) -> None:
    ...
def cancelCTREPCMClosedLoopEnabledCallback(index: int, uid: int) -> None:
    ...
def cancelCTREPCMCompressorCurrentCallback(index: int, uid: int) -> None:
    ...
def cancelCTREPCMCompressorOnCallback(index: int, uid: int) -> None:
    ...
def cancelCTREPCMInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelCTREPCMPressureSwitchCallback(index: int, uid: int) -> None:
    ...
def cancelCTREPCMSolenoidOutputCallback(index: int, channel: int, uid: int) -> None:
    ...
def cancelDIOFilterIndexCallback(index: int, uid: int) -> None:
    ...
def cancelDIOInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelDIOIsInputCallback(index: int, uid: int) -> None:
    ...
def cancelDIOPulseLengthCallback(index: int, uid: int) -> None:
    ...
def cancelDIOValueCallback(index: int, uid: int) -> None:
    ...
def cancelDigitalPWMDutyCycleCallback(index: int, uid: int) -> None:
    ...
def cancelDigitalPWMInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelDigitalPWMPinCallback(index: int, uid: int) -> None:
    ...
def cancelDriverStationAllianceStationIdCallback(uid: int) -> None:
    ...
def cancelDriverStationAutonomousCallback(uid: int) -> None:
    ...
def cancelDriverStationDsAttachedCallback(uid: int) -> None:
    ...
def cancelDriverStationEStopCallback(uid: int) -> None:
    ...
def cancelDriverStationEnabledCallback(uid: int) -> None:
    ...
def cancelDriverStationFmsAttachedCallback(uid: int) -> None:
    ...
def cancelDriverStationMatchTimeCallback(uid: int) -> None:
    ...
def cancelDriverStationNewDataCallback(uid: int) -> None:
    ...
def cancelDriverStationTestCallback(uid: int) -> None:
    ...
def cancelDutyCycleFrequencyCallback(index: int, uid: int) -> None:
    ...
def cancelDutyCycleInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelDutyCycleOutputCallback(index: int, uid: int) -> None:
    ...
def cancelEncoderCountCallback(index: int, uid: int) -> None:
    ...
def cancelEncoderDirectionCallback(index: int, uid: int) -> None:
    ...
def cancelEncoderDistancePerPulseCallback(index: int, uid: int) -> None:
    ...
def cancelEncoderInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelEncoderMaxPeriodCallback(index: int, uid: int) -> None:
    ...
def cancelEncoderPeriodCallback(index: int, uid: int) -> None:
    ...
def cancelEncoderResetCallback(index: int, uid: int) -> None:
    ...
def cancelEncoderReverseDirectionCallback(index: int, uid: int) -> None:
    ...
def cancelEncoderSamplesToAverageCallback(index: int, uid: int) -> None:
    ...
def cancelJoystickAxesCallback(uid: int) -> None:
    ...
def cancelJoystickButtonsCallback(uid: int) -> None:
    ...
def cancelJoystickDescriptorCallback(uid: int) -> None:
    ...
def cancelJoystickOutputsCallback(uid: int) -> None:
    ...
def cancelJoystickPOVsCallback(uid: int) -> None:
    ...
def cancelMatchInfoCallback(uid: int) -> None:
    ...
def cancelPWMInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelPWMPeriodScaleCallback(index: int, uid: int) -> None:
    ...
def cancelPWMPositionCallback(index: int, uid: int) -> None:
    ...
def cancelPWMSpeedCallback(index: int, uid: int) -> None:
    ...
def cancelPWMZeroLatchCallback(index: int, uid: int) -> None:
    ...
def cancelPowerDistributionCurrentCallback(index: int, channel: int, uid: int) -> None:
    ...
def cancelPowerDistributionInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelPowerDistributionTemperatureCallback(index: int, uid: int) -> None:
    ...
def cancelPowerDistributionVoltageCallback(index: int, uid: int) -> None:
    ...
def cancelREVPHCompressorConfigTypeCallback(index: int, uid: int) -> None:
    ...
def cancelREVPHCompressorCurrentCallback(index: int, uid: int) -> None:
    ...
def cancelREVPHCompressorOnCallback(index: int, uid: int) -> None:
    ...
def cancelREVPHInitializedCallback(index: int, uid: int) -> None:
    ...
def cancelREVPHPressureSwitchCallback(index: int, uid: int) -> None:
    ...
def cancelREVPHSolenoidOutputCallback(index: int, channel: int, uid: int) -> None:
    ...
def cancelRelayForwardCallback(index: int, uid: int) -> None:
    ...
def cancelRelayInitializedForwardCallback(index: int, uid: int) -> None:
    ...
def cancelRelayInitializedReverseCallback(index: int, uid: int) -> None:
    ...
def cancelRelayReverseCallback(index: int, uid: int) -> None:
    ...
def cancelRoboRioBrownoutVoltageCallback(uid: int) -> None:
    ...
def cancelRoboRioCPUTempCallback(uid: int) -> None:
    ...
def cancelRoboRioCommentsCallback(uid: int) -> None:
    ...
def cancelRoboRioFPGAButtonCallback(uid: int) -> None:
    ...
def cancelRoboRioRadioLEDStateCallback(uid: int) -> None:
    ...
def cancelRoboRioSerialNumberCallback(uid: int) -> None:
    ...
def cancelRoboRioTeamNumberCallback(uid: int) -> None:
    ...
def cancelRoboRioUserActive3V3Callback(uid: int) -> None:
    ...
def cancelRoboRioUserActive5VCallback(uid: int) -> None:
    ...
def cancelRoboRioUserActive6VCallback(uid: int) -> None:
    ...
def cancelRoboRioUserCurrent3V3Callback(uid: int) -> None:
    ...
def cancelRoboRioUserCurrent5VCallback(uid: int) -> None:
    ...
def cancelRoboRioUserCurrent6VCallback(uid: int) -> None:
    ...
def cancelRoboRioUserFaults3V3Callback(uid: int) -> None:
    ...
def cancelRoboRioUserFaults5VCallback(uid: int) -> None:
    ...
def cancelRoboRioUserFaults6VCallback(uid: int) -> None:
    ...
def cancelRoboRioUserVoltage3V3Callback(uid: int) -> None:
    ...
def cancelRoboRioUserVoltage5VCallback(uid: int) -> None:
    ...
def cancelRoboRioUserVoltage6VCallback(uid: int) -> None:
    ...
def cancelRoboRioVInCurrentCallback(uid: int) -> None:
    ...
def cancelRoboRioVInVoltageCallback(uid: int) -> None:
    ...
def cancelSPIAccelerometerActiveCallback(index: int, uid: int) -> None:
    ...
def cancelSPIAccelerometerRangeCallback(index: int, uid: int) -> None:
    ...
def cancelSPIAccelerometerXCallback(index: int, uid: int) -> None:
    ...
def cancelSPIAccelerometerYCallback(index: int, uid: int) -> None:
    ...
def cancelSPIAccelerometerZCallback(index: int, uid: int) -> None:
    ...
def cancelSimDeviceCreatedCallback(uid: int) -> None:
    ...
def cancelSimDeviceFreedCallback(uid: int) -> None:
    ...
def cancelSimValueChangedCallback(uid: int) -> None:
    ...
def cancelSimValueCreatedCallback(uid: int) -> None:
    ...
def cancelSimValueResetCallback(uid: int) -> None:
    ...
def findAddressableLEDForChannel(channel: int) -> int:
    ...
def findAnalogTriggerForChannel(channel: int) -> int:
    ...
def findDigitalPWMForChannel(channel: int) -> int:
    ...
def findDutyCycleForChannel(channel: int) -> int:
    ...
def findEncoderForChannel(channel: int) -> int:
    ...
def getAccelerometerActive(index: int) -> int:
    ...
def getAccelerometerRange(index: int) -> hal._wpiHal.AccelerometerRange:
    ...
def getAccelerometerX(index: int) -> float:
    ...
def getAccelerometerY(index: int) -> float:
    ...
def getAccelerometerZ(index: int) -> float:
    ...
def getAddressableLEDData(index: int, data: hal._wpiHal.AddressableLEDData) -> int:
    ...
def getAddressableLEDInitialized(index: int) -> int:
    ...
def getAddressableLEDLength(index: int) -> int:
    ...
def getAddressableLEDOutputPort(index: int) -> int:
    ...
def getAddressableLEDRunning(index: int) -> int:
    ...
def getAnalogGyroAngle(index: int) -> float:
    ...
def getAnalogGyroInitialized(index: int) -> int:
    ...
def getAnalogGyroRate(index: int) -> float:
    ...
def getAnalogInAccumulatorCenter(index: int) -> int:
    ...
def getAnalogInAccumulatorCount(index: int) -> int:
    ...
def getAnalogInAccumulatorDeadband(index: int) -> int:
    ...
def getAnalogInAccumulatorInitialized(index: int) -> int:
    ...
def getAnalogInAccumulatorValue(index: int) -> int:
    ...
def getAnalogInAverageBits(index: int) -> int:
    ...
def getAnalogInInitialized(index: int) -> int:
    ...
def getAnalogInOversampleBits(index: int) -> int:
    ...
def getAnalogInSimDevice(index: int) -> int:
    ...
def getAnalogInVoltage(index: int) -> float:
    ...
def getAnalogOutInitialized(index: int) -> int:
    ...
def getAnalogOutVoltage(index: int) -> float:
    ...
def getAnalogTriggerInitialized(index: int) -> int:
    ...
def getAnalogTriggerTriggerLowerBound(index: int) -> float:
    ...
def getAnalogTriggerTriggerMode(index: int) -> AnalogTriggerMode:
    ...
def getAnalogTriggerTriggerUpperBound(index: int) -> float:
    ...
def getCTREPCMAllSolenoids(index: int) -> int:
    ...
def getCTREPCMClosedLoopEnabled(index: int) -> int:
    ...
def getCTREPCMCompressorCurrent(index: int) -> float:
    ...
def getCTREPCMCompressorOn(index: int) -> int:
    ...
def getCTREPCMInitialized(index: int) -> int:
    ...
def getCTREPCMPressureSwitch(index: int) -> int:
    ...
def getCTREPCMSolenoidOutput(index: int, channel: int) -> int:
    ...
def getDIOFilterIndex(index: int) -> int:
    ...
def getDIOInitialized(index: int) -> int:
    ...
def getDIOIsInput(index: int) -> int:
    ...
def getDIOPulseLength(index: int) -> float:
    ...
def getDIOSimDevice(index: int) -> int:
    ...
def getDIOValue(index: int) -> int:
    ...
def getDigitalPWMDutyCycle(index: int) -> float:
    ...
def getDigitalPWMInitialized(index: int) -> int:
    ...
def getDigitalPWMPin(index: int) -> int:
    ...
def getDriverStationAllianceStationId() -> hal._wpiHal.AllianceStationID:
    ...
def getDriverStationAutonomous() -> int:
    ...
def getDriverStationDsAttached() -> int:
    ...
def getDriverStationEStop() -> int:
    ...
def getDriverStationEnabled() -> int:
    ...
def getDriverStationFmsAttached() -> int:
    ...
def getDriverStationMatchTime() -> float:
    ...
def getDriverStationTest() -> int:
    ...
def getDutyCycleDigitalChannel(index: int) -> int:
    ...
def getDutyCycleFrequency(index: int) -> int:
    ...
def getDutyCycleInitialized(index: int) -> int:
    ...
def getDutyCycleOutput(index: int) -> float:
    ...
def getDutyCycleSimDevice(index: int) -> int:
    ...
def getEncoderCount(index: int) -> int:
    ...
def getEncoderDigitalChannelA(index: int) -> int:
    ...
def getEncoderDigitalChannelB(index: int) -> int:
    ...
def getEncoderDirection(index: int) -> int:
    ...
def getEncoderDistance(index: int) -> float:
    ...
def getEncoderDistancePerPulse(index: int) -> float:
    ...
def getEncoderInitialized(index: int) -> int:
    ...
def getEncoderMaxPeriod(index: int) -> float:
    ...
def getEncoderPeriod(index: int) -> float:
    ...
def getEncoderRate(index: int) -> float:
    ...
def getEncoderReset(index: int) -> int:
    ...
def getEncoderReverseDirection(index: int) -> int:
    ...
def getEncoderSamplesToAverage(index: int) -> int:
    ...
def getEncoderSimDevice(index: int) -> int:
    ...
def getJoystickAxes(joystickNum: int, axes: hal._wpiHal.JoystickAxes) -> None:
    ...
def getJoystickButtons(joystickNum: int, buttons: hal._wpiHal.JoystickButtons) -> None:
    ...
def getJoystickCounts(stick: int) -> tuple[int, int, int]:
    ...
def getJoystickDescriptor(joystickNum: int, descriptor: hal._wpiHal.JoystickDescriptor) -> None:
    ...
def getJoystickOutputs(joystickNum: int) -> tuple[int, int, int]:
    ...
def getJoystickPOVs(joystickNum: int, povs: hal._wpiHal.JoystickPOVs) -> None:
    ...
def getMatchInfo(info: hal._wpiHal.MatchInfo) -> None:
    ...
def getNextNotifierTimeout() -> int:
    ...
def getNotifierInfo(arr: NotifierInfo, size: int) -> int:
    """
    Gets detailed information about each notifier.
    
    :param arr:  array of information to be filled
    :param size: size of arr
    
    :returns: Number of notifiers; note: may be larger than passed-in size
    """
def getNumNotifiers() -> int:
    ...
def getPWMInitialized(index: int) -> int:
    ...
def getPWMPeriodScale(index: int) -> int:
    ...
def getPWMPosition(index: int) -> float:
    ...
def getPWMPulseMicrosecond(index: int) -> int:
    ...
def getPWMSpeed(index: int) -> float:
    ...
def getPWMZeroLatch(index: int) -> int:
    ...
def getPowerDistributionAllCurrents(index: int, length: int) -> float:
    ...
def getPowerDistributionCurrent(index: int, channel: int) -> float:
    ...
def getPowerDistributionInitialized(index: int) -> int:
    ...
def getPowerDistributionTemperature(index: int) -> float:
    ...
def getPowerDistributionVoltage(index: int) -> float:
    ...
def getProgramStarted() -> int:
    ...
def getREVPHAllSolenoids(index: int) -> int:
    ...
def getREVPHCompressorConfigType(index: int) -> hal._wpiHal.REVPHCompressorConfigType:
    ...
def getREVPHCompressorCurrent(index: int) -> float:
    ...
def getREVPHCompressorOn(index: int) -> int:
    ...
def getREVPHInitialized(index: int) -> int:
    ...
def getREVPHPressureSwitch(index: int) -> int:
    ...
def getREVPHSolenoidOutput(index: int, channel: int) -> int:
    ...
def getRelayForward(index: int) -> int:
    ...
def getRelayInitializedForward(index: int) -> int:
    ...
def getRelayInitializedReverse(index: int) -> int:
    ...
def getRelayReverse(index: int) -> int:
    ...
def getRoboRioBrownoutVoltage() -> float:
    ...
def getRoboRioCPUTemp() -> float:
    ...
def getRoboRioComments(size: int) -> tuple[int, str]:
    ...
def getRoboRioFPGAButton() -> int:
    ...
def getRoboRioRadioLEDState() -> hal._wpiHal.HAL_RadioLEDState:
    ...
def getRoboRioSerialNumber(size: int) -> tuple[int, str]:
    ...
def getRoboRioTeamNumber() -> int:
    ...
def getRoboRioUserActive3V3() -> int:
    ...
def getRoboRioUserActive5V() -> int:
    ...
def getRoboRioUserActive6V() -> int:
    ...
def getRoboRioUserCurrent3V3() -> float:
    ...
def getRoboRioUserCurrent5V() -> float:
    ...
def getRoboRioUserCurrent6V() -> float:
    ...
def getRoboRioUserFaults3V3() -> int:
    ...
def getRoboRioUserFaults5V() -> int:
    ...
def getRoboRioUserFaults6V() -> int:
    ...
def getRoboRioUserVoltage3V3() -> float:
    ...
def getRoboRioUserVoltage5V() -> float:
    ...
def getRoboRioUserVoltage6V() -> float:
    ...
def getRoboRioVInCurrent() -> float:
    ...
def getRoboRioVInVoltage() -> float:
    ...
def getSPIAccelerometerActive(index: int) -> int:
    ...
def getSPIAccelerometerRange(index: int) -> int:
    ...
def getSPIAccelerometerX(index: int) -> float:
    ...
def getSPIAccelerometerY(index: int) -> float:
    ...
def getSPIAccelerometerZ(index: int) -> float:
    ...
def getSimDeviceHandle(name: str) -> int:
    ...
def getSimDeviceName(handle: int) -> str:
    ...
def getSimValueDeviceHandle(handle: int) -> int:
    ...
def getSimValueHandle(device: int, name: str) -> int:
    ...
def isSimDeviceEnabled(name: str) -> int:
    ...
def isTimingPaused() -> int:
    ...
def notifyDriverStationNewData() -> None:
    ...
def pauseTiming() -> None:
    ...
def registerSimPeriodicAfterCallback(callback: typing.Callable[[], None]) -> SimCB:
    ...
def registerSimPeriodicBeforeCallback(callback: typing.Callable[[], None]) -> SimCB:
    ...
def resetAccelerometerData(index: int) -> None:
    ...
def resetAddressableLEDData(index: int) -> None:
    ...
def resetAllSimData() -> None:
    ...
def resetAnalogGyroData(index: int) -> None:
    ...
def resetAnalogInData(index: int) -> None:
    ...
def resetAnalogOutData(index: int) -> None:
    ...
def resetAnalogTriggerData(index: int) -> None:
    ...
def resetCTREPCMData(index: int) -> None:
    ...
def resetDIOData(index: int) -> None:
    ...
def resetDigitalPWMData(index: int) -> None:
    ...
def resetDriverStationData() -> None:
    ...
def resetDutyCycleData(index: int) -> None:
    ...
def resetEncoderData(index: int) -> None:
    ...
def resetGlobalHandles() -> None:
    ...
def resetPWMData(index: int) -> None:
    ...
def resetPowerDistributionData(index: int) -> None:
    ...
def resetREVPHData(index: int) -> None:
    ...
def resetRelayData(index: int) -> None:
    ...
def resetRoboRioData() -> None:
    ...
def resetSPIAccelerometerData(index: int) -> None:
    ...
def resetSimDeviceData() -> None:
    ...
def restartTiming() -> None:
    ...
def resumeTiming() -> None:
    ...
def setAccelerometerActive(index: int, active: int) -> None:
    ...
def setAccelerometerRange(index: int, range: hal._wpiHal.AccelerometerRange) -> None:
    ...
def setAccelerometerX(index: int, x: float) -> None:
    ...
def setAccelerometerY(index: int, y: float) -> None:
    ...
def setAccelerometerZ(index: int, z: float) -> None:
    ...
def setAddressableLEDData(index: int, data: hal._wpiHal.AddressableLEDData, length: int) -> None:
    ...
def setAddressableLEDInitialized(index: int, initialized: int) -> None:
    ...
def setAddressableLEDLength(index: int, length: int) -> None:
    ...
def setAddressableLEDOutputPort(index: int, outputPort: int) -> None:
    ...
def setAddressableLEDRunning(index: int, running: int) -> None:
    ...
def setAnalogGyroAngle(index: int, angle: float) -> None:
    ...
def setAnalogGyroInitialized(index: int, initialized: int) -> None:
    ...
def setAnalogGyroRate(index: int, rate: float) -> None:
    ...
def setAnalogInAccumulatorCenter(index: int, accumulatorCenter: int) -> None:
    ...
def setAnalogInAccumulatorCount(index: int, accumulatorCount: int) -> None:
    ...
def setAnalogInAccumulatorDeadband(index: int, accumulatorDeadband: int) -> None:
    ...
def setAnalogInAccumulatorInitialized(index: int, accumulatorInitialized: int) -> None:
    ...
def setAnalogInAccumulatorValue(index: int, accumulatorValue: int) -> None:
    ...
def setAnalogInAverageBits(index: int, averageBits: int) -> None:
    ...
def setAnalogInInitialized(index: int, initialized: int) -> None:
    ...
def setAnalogInOversampleBits(index: int, oversampleBits: int) -> None:
    ...
def setAnalogInVoltage(index: int, voltage: float) -> None:
    ...
def setAnalogOutInitialized(index: int, initialized: int) -> None:
    ...
def setAnalogOutVoltage(index: int, voltage: float) -> None:
    ...
def setAnalogTriggerInitialized(index: int, initialized: int) -> None:
    ...
def setAnalogTriggerTriggerLowerBound(index: int, triggerLowerBound: float) -> None:
    ...
def setAnalogTriggerTriggerMode(index: int, triggerMode: AnalogTriggerMode) -> None:
    ...
def setAnalogTriggerTriggerUpperBound(index: int, triggerUpperBound: float) -> None:
    ...
def setCTREPCMAllSolenoids(index: int, values: int) -> None:
    ...
def setCTREPCMClosedLoopEnabled(index: int, closedLoopEnabled: int) -> None:
    ...
def setCTREPCMCompressorCurrent(index: int, compressorCurrent: float) -> None:
    ...
def setCTREPCMCompressorOn(index: int, compressorOn: int) -> None:
    ...
def setCTREPCMInitialized(index: int, solenoidInitialized: int) -> None:
    ...
def setCTREPCMPressureSwitch(index: int, pressureSwitch: int) -> None:
    ...
def setCTREPCMSolenoidOutput(index: int, channel: int, solenoidOutput: int) -> None:
    ...
def setDIOFilterIndex(index: int, filterIndex: int) -> None:
    ...
def setDIOInitialized(index: int, initialized: int) -> None:
    ...
def setDIOIsInput(index: int, isInput: int) -> None:
    ...
def setDIOPulseLength(index: int, pulseLength: float) -> None:
    ...
def setDIOValue(index: int, value: int) -> None:
    ...
def setDigitalPWMDutyCycle(index: int, dutyCycle: float) -> None:
    ...
def setDigitalPWMInitialized(index: int, initialized: int) -> None:
    ...
def setDigitalPWMPin(index: int, pin: int) -> None:
    ...
def setDriverStationAllianceStationId(allianceStationId: hal._wpiHal.AllianceStationID) -> None:
    ...
def setDriverStationAutonomous(autonomous: int) -> None:
    ...
def setDriverStationDsAttached(dsAttached: int) -> None:
    ...
def setDriverStationEStop(eStop: int) -> None:
    ...
def setDriverStationEnabled(enabled: int) -> None:
    ...
def setDriverStationFmsAttached(fmsAttached: int) -> None:
    ...
def setDriverStationMatchTime(matchTime: float) -> None:
    ...
def setDriverStationTest(test: int) -> None:
    ...
def setDutyCycleFrequency(index: int, frequency: int) -> None:
    ...
def setDutyCycleInitialized(index: int, initialized: int) -> None:
    ...
def setDutyCycleOutput(index: int, output: float) -> None:
    ...
def setEncoderCount(index: int, count: int) -> None:
    ...
def setEncoderDirection(index: int, direction: int) -> None:
    ...
def setEncoderDistance(index: int, distance: float) -> None:
    ...
def setEncoderDistancePerPulse(index: int, distancePerPulse: float) -> None:
    ...
def setEncoderInitialized(index: int, initialized: int) -> None:
    ...
def setEncoderMaxPeriod(index: int, maxPeriod: float) -> None:
    ...
def setEncoderPeriod(index: int, period: float) -> None:
    ...
def setEncoderRate(index: int, rate: float) -> None:
    ...
def setEncoderReset(index: int, reset: int) -> None:
    ...
def setEncoderReverseDirection(index: int, reverseDirection: int) -> None:
    ...
def setEncoderSamplesToAverage(index: int, samplesToAverage: int) -> None:
    ...
def setEventName(name: str, size: int) -> None:
    ...
def setGameSpecificMessage(message: str, size: int) -> None:
    ...
def setJoystickAxes(joystickNum: int, axes: hal._wpiHal.JoystickAxes) -> None:
    ...
def setJoystickAxis(stick: int, axis: int, value: float) -> None:
    ...
def setJoystickAxisCount(stick: int, count: int) -> None:
    ...
def setJoystickAxisType(stick: int, axis: int, type: int) -> None:
    ...
def setJoystickButton(stick: int, button: int, state: int) -> None:
    ...
def setJoystickButtonCount(stick: int, count: int) -> None:
    ...
def setJoystickButtons(joystickNum: int, buttons: hal._wpiHal.JoystickButtons) -> None:
    ...
def setJoystickButtonsValue(stick: int, buttons: int) -> None:
    ...
def setJoystickDescriptor(joystickNum: int, descriptor: hal._wpiHal.JoystickDescriptor) -> None:
    ...
def setJoystickIsXbox(stick: int, isXbox: int) -> None:
    ...
def setJoystickName(stick: int, name: str, size: int) -> None:
    ...
def setJoystickOutputs(joystickNum: int, outputs: int, leftRumble: int, rightRumble: int) -> None:
    ...
def setJoystickPOV(stick: int, pov: int, value: int) -> None:
    ...
def setJoystickPOVCount(stick: int, count: int) -> None:
    ...
def setJoystickPOVs(joystickNum: int, povs: hal._wpiHal.JoystickPOVs) -> None:
    ...
def setJoystickType(stick: int, type: int) -> None:
    ...
def setMatchInfo(info: hal._wpiHal.MatchInfo) -> None:
    ...
def setMatchNumber(matchNumber: int) -> None:
    ...
def setMatchType(type: hal._wpiHal.MatchType) -> None:
    ...
def setPWMInitialized(index: int, initialized: int) -> None:
    ...
def setPWMPeriodScale(index: int, periodScale: int) -> None:
    ...
def setPWMPosition(index: int, position: float) -> None:
    ...
def setPWMPulseMicrosecond(index: int, microsecondPulseTime: int) -> None:
    ...
def setPWMSpeed(index: int, speed: float) -> None:
    ...
def setPWMZeroLatch(index: int, zeroLatch: int) -> None:
    ...
def setPowerDistributionAllCurrents(index: int, currents: float, length: int) -> None:
    ...
def setPowerDistributionCurrent(index: int, channel: int, current: float) -> None:
    ...
def setPowerDistributionInitialized(index: int, initialized: int) -> None:
    ...
def setPowerDistributionTemperature(index: int, temperature: float) -> None:
    ...
def setPowerDistributionVoltage(index: int, voltage: float) -> None:
    ...
def setProgramStarted() -> None:
    ...
def setREVPHAllSolenoids(index: int, values: int) -> None:
    ...
def setREVPHCompressorConfigType(index: int, configType: hal._wpiHal.REVPHCompressorConfigType) -> None:
    ...
def setREVPHCompressorCurrent(index: int, compressorCurrent: float) -> None:
    ...
def setREVPHCompressorOn(index: int, compressorOn: int) -> None:
    ...
def setREVPHInitialized(index: int, solenoidInitialized: int) -> None:
    ...
def setREVPHPressureSwitch(index: int, pressureSwitch: int) -> None:
    ...
def setREVPHSolenoidOutput(index: int, channel: int, solenoidOutput: int) -> None:
    ...
def setRelayForward(index: int, forward: int) -> None:
    ...
def setRelayInitializedForward(index: int, initializedForward: int) -> None:
    ...
def setRelayInitializedReverse(index: int, initializedReverse: int) -> None:
    ...
def setRelayReverse(index: int, reverse: int) -> None:
    ...
def setReplayNumber(replayNumber: int) -> None:
    ...
def setRoboRioBrownoutVoltage(brownoutVoltage: float) -> None:
    ...
def setRoboRioCPUTemp(cpuTemp: float) -> None:
    ...
def setRoboRioComments(comments: str, size: int) -> None:
    ...
def setRoboRioFPGAButton(fPGAButton: int) -> None:
    ...
def setRoboRioRadioLEDState(state: hal._wpiHal.HAL_RadioLEDState) -> None:
    ...
def setRoboRioSerialNumber(serialNumber: str, size: int) -> None:
    ...
def setRoboRioTeamNumber(teamNumber: int) -> None:
    ...
def setRoboRioUserActive3V3(userActive3V3: int) -> None:
    ...
def setRoboRioUserActive5V(userActive5V: int) -> None:
    ...
def setRoboRioUserActive6V(userActive6V: int) -> None:
    ...
def setRoboRioUserCurrent3V3(userCurrent3V3: float) -> None:
    ...
def setRoboRioUserCurrent5V(userCurrent5V: float) -> None:
    ...
def setRoboRioUserCurrent6V(userCurrent6V: float) -> None:
    ...
def setRoboRioUserFaults3V3(userFaults3V3: int) -> None:
    ...
def setRoboRioUserFaults5V(userFaults5V: int) -> None:
    ...
def setRoboRioUserFaults6V(userFaults6V: int) -> None:
    ...
def setRoboRioUserVoltage3V3(userVoltage3V3: float) -> None:
    ...
def setRoboRioUserVoltage5V(userVoltage5V: float) -> None:
    ...
def setRoboRioUserVoltage6V(userVoltage6V: float) -> None:
    ...
def setRoboRioVInCurrent(vInCurrent: float) -> None:
    ...
def setRoboRioVInVoltage(vInVoltage: float) -> None:
    ...
def setRuntimeType(type: hal._wpiHal.RuntimeType) -> None:
    ...
def setSPIAccelerometerActive(index: int, active: int) -> None:
    ...
def setSPIAccelerometerRange(index: int, range: int) -> None:
    ...
def setSPIAccelerometerX(index: int, x: float) -> None:
    ...
def setSPIAccelerometerY(index: int, y: float) -> None:
    ...
def setSPIAccelerometerZ(index: int, z: float) -> None:
    ...
def setSimDeviceEnabled(prefix: str, enabled: int) -> None:
    ...
def stepTiming(delta: int) -> None:
    ...
def stepTimingAsync(delta: int) -> None:
    ...
def waitForProgramStart() -> None:
    ...
