

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <frc\kinematics\SwerveDriveOdometry.h>










#include <wpi_array_type_caster.h>


namespace rpygen {


using namespace frc;




template <size_t NumModules>
struct bind_frc__SwerveDriveOdometry {

    

    
  
  

    

    py::class_<typename frc::SwerveDriveOdometry<NumModules>, frc::Odometry<SwerveDriveWheelSpeeds<NumModules>, SwerveDriveWheelPositions<NumModules>>> cls_SwerveDriveOdometry;

    

    
    

    py::module &m;
    std::string clsName;

bind_frc__SwerveDriveOdometry(py::module &m, const char * clsName) :
    
    cls_SwerveDriveOdometry(m, clsName),

  

  
  
    m(m),
    clsName(clsName)
{
    
  

}

void finish(const char * set_doc = NULL, const char * add_doc = NULL) {

    

  cls_SwerveDriveOdometry.doc() =
    "Class for swerve drive odometry. Odometry allows you to track the robot's\n"
"position on the field over a course of a match using readings from your\n"
"swerve drive encoders and swerve azimuth encoders.\n"
"\n"
"Teams can use odometry during the autonomous period for complex tasks like\n"
"path following. Furthermore, odometry can be used for latency compensation\n"
"when using computer-vision systems.";

  cls_SwerveDriveOdometry
  
    
  .def(py::init<SwerveDriveKinematics<NumModules>, const Rotation2d&, const wpi::array<SwerveModulePosition, NumModules>&, const Pose2d&>(),
      py::arg("kinematics"), py::arg("gyroAngle"), py::arg("modulePositions"), py::arg("initialPose") = Pose2d{}, release_gil()
    , py::keep_alive<1, 3>()
    , py::keep_alive<1, 4>()
    , py::keep_alive<1, 5>(), py::doc(
    "Constructs a SwerveDriveOdometry object.\n"
"\n"
":param kinematics:      The swerve drive kinematics for your drivetrain.\n"
":param gyroAngle:       The angle reported by the gyroscope.\n"
":param modulePositions: The wheel positions reported by each module.\n"
":param initialPose:     The starting position of the robot on the field.")
  )
  
  
  
    
  .
def
("resetPosition", &frc::SwerveDriveOdometry<NumModules>::ResetPosition,
      py::arg("gyroAngle"), py::arg("modulePositions"), py::arg("pose"), release_gil(), py::doc(
    "Resets the robot's position on the field.\n"
"\n"
"The gyroscope angle does not need to be reset here on the user's robot\n"
"code. The library automatically takes care of offsetting the gyro angle.\n"
"\n"
":param gyroAngle:       The angle reported by the gyroscope.\n"
":param modulePositions: The wheel positions reported by each module.\n"
":param pose:            The position on the field that your robot is at.")
  )
  
  
  
    
  .
def
("update", &frc::SwerveDriveOdometry<NumModules>::Update,
      py::arg("gyroAngle"), py::arg("modulePositions"), release_gil(), py::doc(
    "Updates the robot's position on the field using forward kinematics and\n"
"integration of the pose over time. This also takes in an angle parameter\n"
"which is used instead of the angular rate that is calculated from forward\n"
"kinematics.\n"
"\n"
":param gyroAngle:       The angle reported by the gyroscope.\n"
":param modulePositions: The current position of all swerve modules. Please\n"
"                        provide the positions in the same order in which you instantiated your\n"
"                        SwerveDriveKinematics.\n"
"\n"
":returns: The new pose of the robot.")
  )
  
  
  ;

  



    if (set_doc) {
        cls_SwerveDriveOdometry.doc() = set_doc;
    }
    if (add_doc) {
        cls_SwerveDriveOdometry.doc() = py::cast<std::string>(cls_SwerveDriveOdometry.doc()) + add_doc;
    }

    
}

}; // struct bind_frc__SwerveDriveOdometry

}; // namespace rpygen
