// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry2d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geometry2d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geometry2d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geometry2d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_geometry2d_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry2d_2eproto;
namespace wpi {
namespace proto {
class ProtobufPose2d;
struct ProtobufPose2dDefaultTypeInternal;
extern ProtobufPose2dDefaultTypeInternal _ProtobufPose2d_default_instance_;
class ProtobufRotation2d;
struct ProtobufRotation2dDefaultTypeInternal;
extern ProtobufRotation2dDefaultTypeInternal _ProtobufRotation2d_default_instance_;
class ProtobufTransform2d;
struct ProtobufTransform2dDefaultTypeInternal;
extern ProtobufTransform2dDefaultTypeInternal _ProtobufTransform2d_default_instance_;
class ProtobufTranslation2d;
struct ProtobufTranslation2dDefaultTypeInternal;
extern ProtobufTranslation2dDefaultTypeInternal _ProtobufTranslation2d_default_instance_;
class ProtobufTwist2d;
struct ProtobufTwist2dDefaultTypeInternal;
extern ProtobufTwist2dDefaultTypeInternal _ProtobufTwist2d_default_instance_;
}  // namespace proto
}  // namespace wpi
PROTOBUF_NAMESPACE_OPEN
template<> ::wpi::proto::ProtobufPose2d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufPose2d>(Arena*);
template<> ::wpi::proto::ProtobufRotation2d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufRotation2d>(Arena*);
template<> ::wpi::proto::ProtobufTransform2d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufTransform2d>(Arena*);
template<> ::wpi::proto::ProtobufTranslation2d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufTranslation2d>(Arena*);
template<> ::wpi::proto::ProtobufTwist2d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufTwist2d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wpi {
namespace proto {

// ===================================================================

class ProtobufTranslation2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufTranslation2d) */ {
 public:
  inline ProtobufTranslation2d() : ProtobufTranslation2d(nullptr) {}
  ~ProtobufTranslation2d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufTranslation2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufTranslation2d(const ProtobufTranslation2d& from);
  ProtobufTranslation2d(ProtobufTranslation2d&& from) noexcept
    : ProtobufTranslation2d() {
    *this = ::std::move(from);
  }

  inline ProtobufTranslation2d& operator=(const ProtobufTranslation2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufTranslation2d& operator=(ProtobufTranslation2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufTranslation2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufTranslation2d* internal_default_instance() {
    return reinterpret_cast<const ProtobufTranslation2d*>(
               &_ProtobufTranslation2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtobufTranslation2d& a, ProtobufTranslation2d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufTranslation2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufTranslation2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufTranslation2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufTranslation2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufTranslation2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufTranslation2d& from) {
    ProtobufTranslation2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufTranslation2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufTranslation2d";
  }
  protected:
  explicit ProtobufTranslation2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufTranslation2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry2d_2eproto;
};
// -------------------------------------------------------------------

class ProtobufRotation2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufRotation2d) */ {
 public:
  inline ProtobufRotation2d() : ProtobufRotation2d(nullptr) {}
  ~ProtobufRotation2d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufRotation2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufRotation2d(const ProtobufRotation2d& from);
  ProtobufRotation2d(ProtobufRotation2d&& from) noexcept
    : ProtobufRotation2d() {
    *this = ::std::move(from);
  }

  inline ProtobufRotation2d& operator=(const ProtobufRotation2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufRotation2d& operator=(ProtobufRotation2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufRotation2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufRotation2d* internal_default_instance() {
    return reinterpret_cast<const ProtobufRotation2d*>(
               &_ProtobufRotation2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtobufRotation2d& a, ProtobufRotation2d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufRotation2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufRotation2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufRotation2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufRotation2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufRotation2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufRotation2d& from) {
    ProtobufRotation2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufRotation2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufRotation2d";
  }
  protected:
  explicit ProtobufRotation2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufRotation2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry2d_2eproto;
};
// -------------------------------------------------------------------

class ProtobufPose2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufPose2d) */ {
 public:
  inline ProtobufPose2d() : ProtobufPose2d(nullptr) {}
  ~ProtobufPose2d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufPose2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufPose2d(const ProtobufPose2d& from);
  ProtobufPose2d(ProtobufPose2d&& from) noexcept
    : ProtobufPose2d() {
    *this = ::std::move(from);
  }

  inline ProtobufPose2d& operator=(const ProtobufPose2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufPose2d& operator=(ProtobufPose2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufPose2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufPose2d* internal_default_instance() {
    return reinterpret_cast<const ProtobufPose2d*>(
               &_ProtobufPose2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtobufPose2d& a, ProtobufPose2d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufPose2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufPose2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufPose2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufPose2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufPose2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufPose2d& from) {
    ProtobufPose2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufPose2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufPose2d";
  }
  protected:
  explicit ProtobufPose2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .wpi.proto.ProtobufTranslation2d translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::wpi::proto::ProtobufTranslation2d& translation() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufTranslation2d* release_translation();
  ::wpi::proto::ProtobufTranslation2d* mutable_translation();
  void set_allocated_translation(::wpi::proto::ProtobufTranslation2d* translation);
  private:
  const ::wpi::proto::ProtobufTranslation2d& _internal_translation() const;
  ::wpi::proto::ProtobufTranslation2d* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::wpi::proto::ProtobufTranslation2d* translation);
  ::wpi::proto::ProtobufTranslation2d* unsafe_arena_release_translation();

  // .wpi.proto.ProtobufRotation2d rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::wpi::proto::ProtobufRotation2d& rotation() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufRotation2d* release_rotation();
  ::wpi::proto::ProtobufRotation2d* mutable_rotation();
  void set_allocated_rotation(::wpi::proto::ProtobufRotation2d* rotation);
  private:
  const ::wpi::proto::ProtobufRotation2d& _internal_rotation() const;
  ::wpi::proto::ProtobufRotation2d* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::wpi::proto::ProtobufRotation2d* rotation);
  ::wpi::proto::ProtobufRotation2d* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufPose2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wpi::proto::ProtobufTranslation2d* translation_;
    ::wpi::proto::ProtobufRotation2d* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry2d_2eproto;
};
// -------------------------------------------------------------------

class ProtobufTransform2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufTransform2d) */ {
 public:
  inline ProtobufTransform2d() : ProtobufTransform2d(nullptr) {}
  ~ProtobufTransform2d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufTransform2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufTransform2d(const ProtobufTransform2d& from);
  ProtobufTransform2d(ProtobufTransform2d&& from) noexcept
    : ProtobufTransform2d() {
    *this = ::std::move(from);
  }

  inline ProtobufTransform2d& operator=(const ProtobufTransform2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufTransform2d& operator=(ProtobufTransform2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufTransform2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufTransform2d* internal_default_instance() {
    return reinterpret_cast<const ProtobufTransform2d*>(
               &_ProtobufTransform2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtobufTransform2d& a, ProtobufTransform2d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufTransform2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufTransform2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufTransform2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufTransform2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufTransform2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufTransform2d& from) {
    ProtobufTransform2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufTransform2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufTransform2d";
  }
  protected:
  explicit ProtobufTransform2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .wpi.proto.ProtobufTranslation2d translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::wpi::proto::ProtobufTranslation2d& translation() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufTranslation2d* release_translation();
  ::wpi::proto::ProtobufTranslation2d* mutable_translation();
  void set_allocated_translation(::wpi::proto::ProtobufTranslation2d* translation);
  private:
  const ::wpi::proto::ProtobufTranslation2d& _internal_translation() const;
  ::wpi::proto::ProtobufTranslation2d* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::wpi::proto::ProtobufTranslation2d* translation);
  ::wpi::proto::ProtobufTranslation2d* unsafe_arena_release_translation();

  // .wpi.proto.ProtobufRotation2d rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::wpi::proto::ProtobufRotation2d& rotation() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufRotation2d* release_rotation();
  ::wpi::proto::ProtobufRotation2d* mutable_rotation();
  void set_allocated_rotation(::wpi::proto::ProtobufRotation2d* rotation);
  private:
  const ::wpi::proto::ProtobufRotation2d& _internal_rotation() const;
  ::wpi::proto::ProtobufRotation2d* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::wpi::proto::ProtobufRotation2d* rotation);
  ::wpi::proto::ProtobufRotation2d* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufTransform2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wpi::proto::ProtobufTranslation2d* translation_;
    ::wpi::proto::ProtobufRotation2d* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry2d_2eproto;
};
// -------------------------------------------------------------------

class ProtobufTwist2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufTwist2d) */ {
 public:
  inline ProtobufTwist2d() : ProtobufTwist2d(nullptr) {}
  ~ProtobufTwist2d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufTwist2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufTwist2d(const ProtobufTwist2d& from);
  ProtobufTwist2d(ProtobufTwist2d&& from) noexcept
    : ProtobufTwist2d() {
    *this = ::std::move(from);
  }

  inline ProtobufTwist2d& operator=(const ProtobufTwist2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufTwist2d& operator=(ProtobufTwist2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufTwist2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufTwist2d* internal_default_instance() {
    return reinterpret_cast<const ProtobufTwist2d*>(
               &_ProtobufTwist2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProtobufTwist2d& a, ProtobufTwist2d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufTwist2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufTwist2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufTwist2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufTwist2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufTwist2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufTwist2d& from) {
    ProtobufTwist2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufTwist2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufTwist2d";
  }
  protected:
  explicit ProtobufTwist2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDxFieldNumber = 1,
    kDyFieldNumber = 2,
    kDthetaFieldNumber = 3,
  };
  // double dx = 1;
  void clear_dx();
  double dx() const;
  void set_dx(double value);
  private:
  double _internal_dx() const;
  void _internal_set_dx(double value);
  public:

  // double dy = 2;
  void clear_dy();
  double dy() const;
  void set_dy(double value);
  private:
  double _internal_dy() const;
  void _internal_set_dy(double value);
  public:

  // double dtheta = 3;
  void clear_dtheta();
  double dtheta() const;
  void set_dtheta(double value);
  private:
  double _internal_dtheta() const;
  void _internal_set_dtheta(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufTwist2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double dx_;
    double dy_;
    double dtheta_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry2d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtobufTranslation2d

// double x = 1;
inline void ProtobufTranslation2d::clear_x() {
  _impl_.x_ = 0;
}
inline double ProtobufTranslation2d::_internal_x() const {
  return _impl_.x_;
}
inline double ProtobufTranslation2d::x() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTranslation2d.x)
  return _internal_x();
}
inline void ProtobufTranslation2d::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void ProtobufTranslation2d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTranslation2d.x)
}

// double y = 2;
inline void ProtobufTranslation2d::clear_y() {
  _impl_.y_ = 0;
}
inline double ProtobufTranslation2d::_internal_y() const {
  return _impl_.y_;
}
inline double ProtobufTranslation2d::y() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTranslation2d.y)
  return _internal_y();
}
inline void ProtobufTranslation2d::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void ProtobufTranslation2d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTranslation2d.y)
}

// -------------------------------------------------------------------

// ProtobufRotation2d

// double value = 1;
inline void ProtobufRotation2d::clear_value() {
  _impl_.value_ = 0;
}
inline double ProtobufRotation2d::_internal_value() const {
  return _impl_.value_;
}
inline double ProtobufRotation2d::value() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufRotation2d.value)
  return _internal_value();
}
inline void ProtobufRotation2d::_internal_set_value(double value) {
  
  _impl_.value_ = value;
}
inline void ProtobufRotation2d::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufRotation2d.value)
}

// -------------------------------------------------------------------

// ProtobufPose2d

// .wpi.proto.ProtobufTranslation2d translation = 1;
inline bool ProtobufPose2d::_internal_has_translation() const {
  return this != internal_default_instance() && _impl_.translation_ != nullptr;
}
inline bool ProtobufPose2d::has_translation() const {
  return _internal_has_translation();
}
inline void ProtobufPose2d::clear_translation() {
  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufPose2d::_internal_translation() const {
  const ::wpi::proto::ProtobufTranslation2d* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufTranslation2d&>(
      ::wpi::proto::_ProtobufTranslation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufPose2d::translation() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufPose2d.translation)
  return _internal_translation();
}
inline void ProtobufPose2d::unsafe_arena_set_allocated_translation(
    ::wpi::proto::ProtobufTranslation2d* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufPose2d.translation)
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufPose2d::release_translation() {
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufPose2d::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufPose2d.translation)
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufPose2d::_internal_mutable_translation() {
  
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufTranslation2d>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufPose2d::mutable_translation() {
  ::wpi::proto::ProtobufTranslation2d* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufPose2d.translation)
  return _msg;
}
inline void ProtobufPose2d::set_allocated_translation(::wpi::proto::ProtobufTranslation2d* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufPose2d.translation)
}

// .wpi.proto.ProtobufRotation2d rotation = 2;
inline bool ProtobufPose2d::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool ProtobufPose2d::has_rotation() const {
  return _internal_has_rotation();
}
inline void ProtobufPose2d::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::wpi::proto::ProtobufRotation2d& ProtobufPose2d::_internal_rotation() const {
  const ::wpi::proto::ProtobufRotation2d* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufRotation2d&>(
      ::wpi::proto::_ProtobufRotation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufRotation2d& ProtobufPose2d::rotation() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufPose2d.rotation)
  return _internal_rotation();
}
inline void ProtobufPose2d::unsafe_arena_set_allocated_rotation(
    ::wpi::proto::ProtobufRotation2d* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufPose2d.rotation)
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufPose2d::release_rotation() {
  
  ::wpi::proto::ProtobufRotation2d* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufPose2d::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufPose2d.rotation)
  
  ::wpi::proto::ProtobufRotation2d* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufPose2d::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufRotation2d>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufPose2d::mutable_rotation() {
  ::wpi::proto::ProtobufRotation2d* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufPose2d.rotation)
  return _msg;
}
inline void ProtobufPose2d::set_allocated_rotation(::wpi::proto::ProtobufRotation2d* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufPose2d.rotation)
}

// -------------------------------------------------------------------

// ProtobufTransform2d

// .wpi.proto.ProtobufTranslation2d translation = 1;
inline bool ProtobufTransform2d::_internal_has_translation() const {
  return this != internal_default_instance() && _impl_.translation_ != nullptr;
}
inline bool ProtobufTransform2d::has_translation() const {
  return _internal_has_translation();
}
inline void ProtobufTransform2d::clear_translation() {
  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufTransform2d::_internal_translation() const {
  const ::wpi::proto::ProtobufTranslation2d* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufTranslation2d&>(
      ::wpi::proto::_ProtobufTranslation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufTransform2d::translation() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTransform2d.translation)
  return _internal_translation();
}
inline void ProtobufTransform2d::unsafe_arena_set_allocated_translation(
    ::wpi::proto::ProtobufTranslation2d* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufTransform2d.translation)
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufTransform2d::release_translation() {
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufTransform2d::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufTransform2d.translation)
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufTransform2d::_internal_mutable_translation() {
  
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufTranslation2d>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufTransform2d::mutable_translation() {
  ::wpi::proto::ProtobufTranslation2d* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufTransform2d.translation)
  return _msg;
}
inline void ProtobufTransform2d::set_allocated_translation(::wpi::proto::ProtobufTranslation2d* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufTransform2d.translation)
}

// .wpi.proto.ProtobufRotation2d rotation = 2;
inline bool ProtobufTransform2d::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool ProtobufTransform2d::has_rotation() const {
  return _internal_has_rotation();
}
inline void ProtobufTransform2d::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::wpi::proto::ProtobufRotation2d& ProtobufTransform2d::_internal_rotation() const {
  const ::wpi::proto::ProtobufRotation2d* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufRotation2d&>(
      ::wpi::proto::_ProtobufRotation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufRotation2d& ProtobufTransform2d::rotation() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTransform2d.rotation)
  return _internal_rotation();
}
inline void ProtobufTransform2d::unsafe_arena_set_allocated_rotation(
    ::wpi::proto::ProtobufRotation2d* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufTransform2d.rotation)
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufTransform2d::release_rotation() {
  
  ::wpi::proto::ProtobufRotation2d* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufTransform2d::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufTransform2d.rotation)
  
  ::wpi::proto::ProtobufRotation2d* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufTransform2d::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufRotation2d>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufTransform2d::mutable_rotation() {
  ::wpi::proto::ProtobufRotation2d* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufTransform2d.rotation)
  return _msg;
}
inline void ProtobufTransform2d::set_allocated_rotation(::wpi::proto::ProtobufRotation2d* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufTransform2d.rotation)
}

// -------------------------------------------------------------------

// ProtobufTwist2d

// double dx = 1;
inline void ProtobufTwist2d::clear_dx() {
  _impl_.dx_ = 0;
}
inline double ProtobufTwist2d::_internal_dx() const {
  return _impl_.dx_;
}
inline double ProtobufTwist2d::dx() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTwist2d.dx)
  return _internal_dx();
}
inline void ProtobufTwist2d::_internal_set_dx(double value) {
  
  _impl_.dx_ = value;
}
inline void ProtobufTwist2d::set_dx(double value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTwist2d.dx)
}

// double dy = 2;
inline void ProtobufTwist2d::clear_dy() {
  _impl_.dy_ = 0;
}
inline double ProtobufTwist2d::_internal_dy() const {
  return _impl_.dy_;
}
inline double ProtobufTwist2d::dy() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTwist2d.dy)
  return _internal_dy();
}
inline void ProtobufTwist2d::_internal_set_dy(double value) {
  
  _impl_.dy_ = value;
}
inline void ProtobufTwist2d::set_dy(double value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTwist2d.dy)
}

// double dtheta = 3;
inline void ProtobufTwist2d::clear_dtheta() {
  _impl_.dtheta_ = 0;
}
inline double ProtobufTwist2d::_internal_dtheta() const {
  return _impl_.dtheta_;
}
inline double ProtobufTwist2d::dtheta() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTwist2d.dtheta)
  return _internal_dtheta();
}
inline void ProtobufTwist2d::_internal_set_dtheta(double value) {
  
  _impl_.dtheta_ = value;
}
inline void ProtobufTwist2d::set_dtheta(double value) {
  _internal_set_dtheta(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTwist2d.dtheta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace wpi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geometry2d_2eproto
