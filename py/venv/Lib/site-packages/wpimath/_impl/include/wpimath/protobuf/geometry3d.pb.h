// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry3d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geometry3d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geometry3d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geometry3d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_geometry3d_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry3d_2eproto;
namespace wpi {
namespace proto {
class ProtobufPose3d;
struct ProtobufPose3dDefaultTypeInternal;
extern ProtobufPose3dDefaultTypeInternal _ProtobufPose3d_default_instance_;
class ProtobufQuaternion;
struct ProtobufQuaternionDefaultTypeInternal;
extern ProtobufQuaternionDefaultTypeInternal _ProtobufQuaternion_default_instance_;
class ProtobufRotation3d;
struct ProtobufRotation3dDefaultTypeInternal;
extern ProtobufRotation3dDefaultTypeInternal _ProtobufRotation3d_default_instance_;
class ProtobufTransform3d;
struct ProtobufTransform3dDefaultTypeInternal;
extern ProtobufTransform3dDefaultTypeInternal _ProtobufTransform3d_default_instance_;
class ProtobufTranslation3d;
struct ProtobufTranslation3dDefaultTypeInternal;
extern ProtobufTranslation3dDefaultTypeInternal _ProtobufTranslation3d_default_instance_;
class ProtobufTwist3d;
struct ProtobufTwist3dDefaultTypeInternal;
extern ProtobufTwist3dDefaultTypeInternal _ProtobufTwist3d_default_instance_;
}  // namespace proto
}  // namespace wpi
PROTOBUF_NAMESPACE_OPEN
template<> ::wpi::proto::ProtobufPose3d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufPose3d>(Arena*);
template<> ::wpi::proto::ProtobufQuaternion* Arena::CreateMaybeMessage<::wpi::proto::ProtobufQuaternion>(Arena*);
template<> ::wpi::proto::ProtobufRotation3d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufRotation3d>(Arena*);
template<> ::wpi::proto::ProtobufTransform3d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufTransform3d>(Arena*);
template<> ::wpi::proto::ProtobufTranslation3d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufTranslation3d>(Arena*);
template<> ::wpi::proto::ProtobufTwist3d* Arena::CreateMaybeMessage<::wpi::proto::ProtobufTwist3d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wpi {
namespace proto {

// ===================================================================

class ProtobufTranslation3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufTranslation3d) */ {
 public:
  inline ProtobufTranslation3d() : ProtobufTranslation3d(nullptr) {}
  ~ProtobufTranslation3d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufTranslation3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufTranslation3d(const ProtobufTranslation3d& from);
  ProtobufTranslation3d(ProtobufTranslation3d&& from) noexcept
    : ProtobufTranslation3d() {
    *this = ::std::move(from);
  }

  inline ProtobufTranslation3d& operator=(const ProtobufTranslation3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufTranslation3d& operator=(ProtobufTranslation3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufTranslation3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufTranslation3d* internal_default_instance() {
    return reinterpret_cast<const ProtobufTranslation3d*>(
               &_ProtobufTranslation3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtobufTranslation3d& a, ProtobufTranslation3d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufTranslation3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufTranslation3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufTranslation3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufTranslation3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufTranslation3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufTranslation3d& from) {
    ProtobufTranslation3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufTranslation3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufTranslation3d";
  }
  protected:
  explicit ProtobufTranslation3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufTranslation3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry3d_2eproto;
};
// -------------------------------------------------------------------

class ProtobufQuaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufQuaternion) */ {
 public:
  inline ProtobufQuaternion() : ProtobufQuaternion(nullptr) {}
  ~ProtobufQuaternion() override;
  explicit PROTOBUF_CONSTEXPR ProtobufQuaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufQuaternion(const ProtobufQuaternion& from);
  ProtobufQuaternion(ProtobufQuaternion&& from) noexcept
    : ProtobufQuaternion() {
    *this = ::std::move(from);
  }

  inline ProtobufQuaternion& operator=(const ProtobufQuaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufQuaternion& operator=(ProtobufQuaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufQuaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufQuaternion* internal_default_instance() {
    return reinterpret_cast<const ProtobufQuaternion*>(
               &_ProtobufQuaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtobufQuaternion& a, ProtobufQuaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufQuaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufQuaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufQuaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufQuaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufQuaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufQuaternion& from) {
    ProtobufQuaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufQuaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufQuaternion";
  }
  protected:
  explicit ProtobufQuaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // double w = 1;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufQuaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double w_;
    double x_;
    double y_;
    double z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry3d_2eproto;
};
// -------------------------------------------------------------------

class ProtobufRotation3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufRotation3d) */ {
 public:
  inline ProtobufRotation3d() : ProtobufRotation3d(nullptr) {}
  ~ProtobufRotation3d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufRotation3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufRotation3d(const ProtobufRotation3d& from);
  ProtobufRotation3d(ProtobufRotation3d&& from) noexcept
    : ProtobufRotation3d() {
    *this = ::std::move(from);
  }

  inline ProtobufRotation3d& operator=(const ProtobufRotation3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufRotation3d& operator=(ProtobufRotation3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufRotation3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufRotation3d* internal_default_instance() {
    return reinterpret_cast<const ProtobufRotation3d*>(
               &_ProtobufRotation3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtobufRotation3d& a, ProtobufRotation3d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufRotation3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufRotation3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufRotation3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufRotation3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufRotation3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufRotation3d& from) {
    ProtobufRotation3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufRotation3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufRotation3d";
  }
  protected:
  explicit ProtobufRotation3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 1,
  };
  // .wpi.proto.ProtobufQuaternion q = 1;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::wpi::proto::ProtobufQuaternion& q() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufQuaternion* release_q();
  ::wpi::proto::ProtobufQuaternion* mutable_q();
  void set_allocated_q(::wpi::proto::ProtobufQuaternion* q);
  private:
  const ::wpi::proto::ProtobufQuaternion& _internal_q() const;
  ::wpi::proto::ProtobufQuaternion* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::wpi::proto::ProtobufQuaternion* q);
  ::wpi::proto::ProtobufQuaternion* unsafe_arena_release_q();

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufRotation3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wpi::proto::ProtobufQuaternion* q_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry3d_2eproto;
};
// -------------------------------------------------------------------

class ProtobufPose3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufPose3d) */ {
 public:
  inline ProtobufPose3d() : ProtobufPose3d(nullptr) {}
  ~ProtobufPose3d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufPose3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufPose3d(const ProtobufPose3d& from);
  ProtobufPose3d(ProtobufPose3d&& from) noexcept
    : ProtobufPose3d() {
    *this = ::std::move(from);
  }

  inline ProtobufPose3d& operator=(const ProtobufPose3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufPose3d& operator=(ProtobufPose3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufPose3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufPose3d* internal_default_instance() {
    return reinterpret_cast<const ProtobufPose3d*>(
               &_ProtobufPose3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtobufPose3d& a, ProtobufPose3d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufPose3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufPose3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufPose3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufPose3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufPose3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufPose3d& from) {
    ProtobufPose3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufPose3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufPose3d";
  }
  protected:
  explicit ProtobufPose3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .wpi.proto.ProtobufTranslation3d translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::wpi::proto::ProtobufTranslation3d& translation() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufTranslation3d* release_translation();
  ::wpi::proto::ProtobufTranslation3d* mutable_translation();
  void set_allocated_translation(::wpi::proto::ProtobufTranslation3d* translation);
  private:
  const ::wpi::proto::ProtobufTranslation3d& _internal_translation() const;
  ::wpi::proto::ProtobufTranslation3d* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::wpi::proto::ProtobufTranslation3d* translation);
  ::wpi::proto::ProtobufTranslation3d* unsafe_arena_release_translation();

  // .wpi.proto.ProtobufRotation3d rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::wpi::proto::ProtobufRotation3d& rotation() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufRotation3d* release_rotation();
  ::wpi::proto::ProtobufRotation3d* mutable_rotation();
  void set_allocated_rotation(::wpi::proto::ProtobufRotation3d* rotation);
  private:
  const ::wpi::proto::ProtobufRotation3d& _internal_rotation() const;
  ::wpi::proto::ProtobufRotation3d* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::wpi::proto::ProtobufRotation3d* rotation);
  ::wpi::proto::ProtobufRotation3d* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufPose3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wpi::proto::ProtobufTranslation3d* translation_;
    ::wpi::proto::ProtobufRotation3d* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry3d_2eproto;
};
// -------------------------------------------------------------------

class ProtobufTransform3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufTransform3d) */ {
 public:
  inline ProtobufTransform3d() : ProtobufTransform3d(nullptr) {}
  ~ProtobufTransform3d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufTransform3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufTransform3d(const ProtobufTransform3d& from);
  ProtobufTransform3d(ProtobufTransform3d&& from) noexcept
    : ProtobufTransform3d() {
    *this = ::std::move(from);
  }

  inline ProtobufTransform3d& operator=(const ProtobufTransform3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufTransform3d& operator=(ProtobufTransform3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufTransform3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufTransform3d* internal_default_instance() {
    return reinterpret_cast<const ProtobufTransform3d*>(
               &_ProtobufTransform3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProtobufTransform3d& a, ProtobufTransform3d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufTransform3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufTransform3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufTransform3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufTransform3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufTransform3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufTransform3d& from) {
    ProtobufTransform3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufTransform3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufTransform3d";
  }
  protected:
  explicit ProtobufTransform3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .wpi.proto.ProtobufTranslation3d translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::wpi::proto::ProtobufTranslation3d& translation() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufTranslation3d* release_translation();
  ::wpi::proto::ProtobufTranslation3d* mutable_translation();
  void set_allocated_translation(::wpi::proto::ProtobufTranslation3d* translation);
  private:
  const ::wpi::proto::ProtobufTranslation3d& _internal_translation() const;
  ::wpi::proto::ProtobufTranslation3d* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::wpi::proto::ProtobufTranslation3d* translation);
  ::wpi::proto::ProtobufTranslation3d* unsafe_arena_release_translation();

  // .wpi.proto.ProtobufRotation3d rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::wpi::proto::ProtobufRotation3d& rotation() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufRotation3d* release_rotation();
  ::wpi::proto::ProtobufRotation3d* mutable_rotation();
  void set_allocated_rotation(::wpi::proto::ProtobufRotation3d* rotation);
  private:
  const ::wpi::proto::ProtobufRotation3d& _internal_rotation() const;
  ::wpi::proto::ProtobufRotation3d* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::wpi::proto::ProtobufRotation3d* rotation);
  ::wpi::proto::ProtobufRotation3d* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufTransform3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wpi::proto::ProtobufTranslation3d* translation_;
    ::wpi::proto::ProtobufRotation3d* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry3d_2eproto;
};
// -------------------------------------------------------------------

class ProtobufTwist3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufTwist3d) */ {
 public:
  inline ProtobufTwist3d() : ProtobufTwist3d(nullptr) {}
  ~ProtobufTwist3d() override;
  explicit PROTOBUF_CONSTEXPR ProtobufTwist3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufTwist3d(const ProtobufTwist3d& from);
  ProtobufTwist3d(ProtobufTwist3d&& from) noexcept
    : ProtobufTwist3d() {
    *this = ::std::move(from);
  }

  inline ProtobufTwist3d& operator=(const ProtobufTwist3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufTwist3d& operator=(ProtobufTwist3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufTwist3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufTwist3d* internal_default_instance() {
    return reinterpret_cast<const ProtobufTwist3d*>(
               &_ProtobufTwist3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProtobufTwist3d& a, ProtobufTwist3d& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufTwist3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufTwist3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufTwist3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufTwist3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufTwist3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufTwist3d& from) {
    ProtobufTwist3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufTwist3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufTwist3d";
  }
  protected:
  explicit ProtobufTwist3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDxFieldNumber = 1,
    kDyFieldNumber = 2,
    kDzFieldNumber = 3,
    kRxFieldNumber = 4,
    kRyFieldNumber = 5,
    kRzFieldNumber = 6,
  };
  // double dx = 1;
  void clear_dx();
  double dx() const;
  void set_dx(double value);
  private:
  double _internal_dx() const;
  void _internal_set_dx(double value);
  public:

  // double dy = 2;
  void clear_dy();
  double dy() const;
  void set_dy(double value);
  private:
  double _internal_dy() const;
  void _internal_set_dy(double value);
  public:

  // double dz = 3;
  void clear_dz();
  double dz() const;
  void set_dz(double value);
  private:
  double _internal_dz() const;
  void _internal_set_dz(double value);
  public:

  // double rx = 4;
  void clear_rx();
  double rx() const;
  void set_rx(double value);
  private:
  double _internal_rx() const;
  void _internal_set_rx(double value);
  public:

  // double ry = 5;
  void clear_ry();
  double ry() const;
  void set_ry(double value);
  private:
  double _internal_ry() const;
  void _internal_set_ry(double value);
  public:

  // double rz = 6;
  void clear_rz();
  double rz() const;
  void set_rz(double value);
  private:
  double _internal_rz() const;
  void _internal_set_rz(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufTwist3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double dx_;
    double dy_;
    double dz_;
    double rx_;
    double ry_;
    double rz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geometry3d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtobufTranslation3d

// double x = 1;
inline void ProtobufTranslation3d::clear_x() {
  _impl_.x_ = 0;
}
inline double ProtobufTranslation3d::_internal_x() const {
  return _impl_.x_;
}
inline double ProtobufTranslation3d::x() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTranslation3d.x)
  return _internal_x();
}
inline void ProtobufTranslation3d::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void ProtobufTranslation3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTranslation3d.x)
}

// double y = 2;
inline void ProtobufTranslation3d::clear_y() {
  _impl_.y_ = 0;
}
inline double ProtobufTranslation3d::_internal_y() const {
  return _impl_.y_;
}
inline double ProtobufTranslation3d::y() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTranslation3d.y)
  return _internal_y();
}
inline void ProtobufTranslation3d::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void ProtobufTranslation3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTranslation3d.y)
}

// double z = 3;
inline void ProtobufTranslation3d::clear_z() {
  _impl_.z_ = 0;
}
inline double ProtobufTranslation3d::_internal_z() const {
  return _impl_.z_;
}
inline double ProtobufTranslation3d::z() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTranslation3d.z)
  return _internal_z();
}
inline void ProtobufTranslation3d::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void ProtobufTranslation3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTranslation3d.z)
}

// -------------------------------------------------------------------

// ProtobufQuaternion

// double w = 1;
inline void ProtobufQuaternion::clear_w() {
  _impl_.w_ = 0;
}
inline double ProtobufQuaternion::_internal_w() const {
  return _impl_.w_;
}
inline double ProtobufQuaternion::w() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufQuaternion.w)
  return _internal_w();
}
inline void ProtobufQuaternion::_internal_set_w(double value) {
  
  _impl_.w_ = value;
}
inline void ProtobufQuaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufQuaternion.w)
}

// double x = 2;
inline void ProtobufQuaternion::clear_x() {
  _impl_.x_ = 0;
}
inline double ProtobufQuaternion::_internal_x() const {
  return _impl_.x_;
}
inline double ProtobufQuaternion::x() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufQuaternion.x)
  return _internal_x();
}
inline void ProtobufQuaternion::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void ProtobufQuaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufQuaternion.x)
}

// double y = 3;
inline void ProtobufQuaternion::clear_y() {
  _impl_.y_ = 0;
}
inline double ProtobufQuaternion::_internal_y() const {
  return _impl_.y_;
}
inline double ProtobufQuaternion::y() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufQuaternion.y)
  return _internal_y();
}
inline void ProtobufQuaternion::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void ProtobufQuaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufQuaternion.y)
}

// double z = 4;
inline void ProtobufQuaternion::clear_z() {
  _impl_.z_ = 0;
}
inline double ProtobufQuaternion::_internal_z() const {
  return _impl_.z_;
}
inline double ProtobufQuaternion::z() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufQuaternion.z)
  return _internal_z();
}
inline void ProtobufQuaternion::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void ProtobufQuaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufQuaternion.z)
}

// -------------------------------------------------------------------

// ProtobufRotation3d

// .wpi.proto.ProtobufQuaternion q = 1;
inline bool ProtobufRotation3d::_internal_has_q() const {
  return this != internal_default_instance() && _impl_.q_ != nullptr;
}
inline bool ProtobufRotation3d::has_q() const {
  return _internal_has_q();
}
inline void ProtobufRotation3d::clear_q() {
  if (GetArenaForAllocation() == nullptr && _impl_.q_ != nullptr) {
    delete _impl_.q_;
  }
  _impl_.q_ = nullptr;
}
inline const ::wpi::proto::ProtobufQuaternion& ProtobufRotation3d::_internal_q() const {
  const ::wpi::proto::ProtobufQuaternion* p = _impl_.q_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufQuaternion&>(
      ::wpi::proto::_ProtobufQuaternion_default_instance_);
}
inline const ::wpi::proto::ProtobufQuaternion& ProtobufRotation3d::q() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufRotation3d.q)
  return _internal_q();
}
inline void ProtobufRotation3d::unsafe_arena_set_allocated_q(
    ::wpi::proto::ProtobufQuaternion* q) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.q_);
  }
  _impl_.q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufRotation3d.q)
}
inline ::wpi::proto::ProtobufQuaternion* ProtobufRotation3d::release_q() {
  
  ::wpi::proto::ProtobufQuaternion* temp = _impl_.q_;
  _impl_.q_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufQuaternion* ProtobufRotation3d::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufRotation3d.q)
  
  ::wpi::proto::ProtobufQuaternion* temp = _impl_.q_;
  _impl_.q_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufQuaternion* ProtobufRotation3d::_internal_mutable_q() {
  
  if (_impl_.q_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufQuaternion>(GetArenaForAllocation());
    _impl_.q_ = p;
  }
  return _impl_.q_;
}
inline ::wpi::proto::ProtobufQuaternion* ProtobufRotation3d::mutable_q() {
  ::wpi::proto::ProtobufQuaternion* _msg = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufRotation3d.q)
  return _msg;
}
inline void ProtobufRotation3d::set_allocated_q(::wpi::proto::ProtobufQuaternion* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.q_ = q;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufRotation3d.q)
}

// -------------------------------------------------------------------

// ProtobufPose3d

// .wpi.proto.ProtobufTranslation3d translation = 1;
inline bool ProtobufPose3d::_internal_has_translation() const {
  return this != internal_default_instance() && _impl_.translation_ != nullptr;
}
inline bool ProtobufPose3d::has_translation() const {
  return _internal_has_translation();
}
inline void ProtobufPose3d::clear_translation() {
  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
}
inline const ::wpi::proto::ProtobufTranslation3d& ProtobufPose3d::_internal_translation() const {
  const ::wpi::proto::ProtobufTranslation3d* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufTranslation3d&>(
      ::wpi::proto::_ProtobufTranslation3d_default_instance_);
}
inline const ::wpi::proto::ProtobufTranslation3d& ProtobufPose3d::translation() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufPose3d.translation)
  return _internal_translation();
}
inline void ProtobufPose3d::unsafe_arena_set_allocated_translation(
    ::wpi::proto::ProtobufTranslation3d* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufPose3d.translation)
}
inline ::wpi::proto::ProtobufTranslation3d* ProtobufPose3d::release_translation() {
  
  ::wpi::proto::ProtobufTranslation3d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufTranslation3d* ProtobufPose3d::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufPose3d.translation)
  
  ::wpi::proto::ProtobufTranslation3d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufTranslation3d* ProtobufPose3d::_internal_mutable_translation() {
  
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufTranslation3d>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::wpi::proto::ProtobufTranslation3d* ProtobufPose3d::mutable_translation() {
  ::wpi::proto::ProtobufTranslation3d* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufPose3d.translation)
  return _msg;
}
inline void ProtobufPose3d::set_allocated_translation(::wpi::proto::ProtobufTranslation3d* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufPose3d.translation)
}

// .wpi.proto.ProtobufRotation3d rotation = 2;
inline bool ProtobufPose3d::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool ProtobufPose3d::has_rotation() const {
  return _internal_has_rotation();
}
inline void ProtobufPose3d::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::wpi::proto::ProtobufRotation3d& ProtobufPose3d::_internal_rotation() const {
  const ::wpi::proto::ProtobufRotation3d* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufRotation3d&>(
      ::wpi::proto::_ProtobufRotation3d_default_instance_);
}
inline const ::wpi::proto::ProtobufRotation3d& ProtobufPose3d::rotation() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufPose3d.rotation)
  return _internal_rotation();
}
inline void ProtobufPose3d::unsafe_arena_set_allocated_rotation(
    ::wpi::proto::ProtobufRotation3d* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufPose3d.rotation)
}
inline ::wpi::proto::ProtobufRotation3d* ProtobufPose3d::release_rotation() {
  
  ::wpi::proto::ProtobufRotation3d* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufRotation3d* ProtobufPose3d::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufPose3d.rotation)
  
  ::wpi::proto::ProtobufRotation3d* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufRotation3d* ProtobufPose3d::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufRotation3d>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::wpi::proto::ProtobufRotation3d* ProtobufPose3d::mutable_rotation() {
  ::wpi::proto::ProtobufRotation3d* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufPose3d.rotation)
  return _msg;
}
inline void ProtobufPose3d::set_allocated_rotation(::wpi::proto::ProtobufRotation3d* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufPose3d.rotation)
}

// -------------------------------------------------------------------

// ProtobufTransform3d

// .wpi.proto.ProtobufTranslation3d translation = 1;
inline bool ProtobufTransform3d::_internal_has_translation() const {
  return this != internal_default_instance() && _impl_.translation_ != nullptr;
}
inline bool ProtobufTransform3d::has_translation() const {
  return _internal_has_translation();
}
inline void ProtobufTransform3d::clear_translation() {
  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
}
inline const ::wpi::proto::ProtobufTranslation3d& ProtobufTransform3d::_internal_translation() const {
  const ::wpi::proto::ProtobufTranslation3d* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufTranslation3d&>(
      ::wpi::proto::_ProtobufTranslation3d_default_instance_);
}
inline const ::wpi::proto::ProtobufTranslation3d& ProtobufTransform3d::translation() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTransform3d.translation)
  return _internal_translation();
}
inline void ProtobufTransform3d::unsafe_arena_set_allocated_translation(
    ::wpi::proto::ProtobufTranslation3d* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufTransform3d.translation)
}
inline ::wpi::proto::ProtobufTranslation3d* ProtobufTransform3d::release_translation() {
  
  ::wpi::proto::ProtobufTranslation3d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufTranslation3d* ProtobufTransform3d::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufTransform3d.translation)
  
  ::wpi::proto::ProtobufTranslation3d* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufTranslation3d* ProtobufTransform3d::_internal_mutable_translation() {
  
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufTranslation3d>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::wpi::proto::ProtobufTranslation3d* ProtobufTransform3d::mutable_translation() {
  ::wpi::proto::ProtobufTranslation3d* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufTransform3d.translation)
  return _msg;
}
inline void ProtobufTransform3d::set_allocated_translation(::wpi::proto::ProtobufTranslation3d* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufTransform3d.translation)
}

// .wpi.proto.ProtobufRotation3d rotation = 2;
inline bool ProtobufTransform3d::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool ProtobufTransform3d::has_rotation() const {
  return _internal_has_rotation();
}
inline void ProtobufTransform3d::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::wpi::proto::ProtobufRotation3d& ProtobufTransform3d::_internal_rotation() const {
  const ::wpi::proto::ProtobufRotation3d* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufRotation3d&>(
      ::wpi::proto::_ProtobufRotation3d_default_instance_);
}
inline const ::wpi::proto::ProtobufRotation3d& ProtobufTransform3d::rotation() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTransform3d.rotation)
  return _internal_rotation();
}
inline void ProtobufTransform3d::unsafe_arena_set_allocated_rotation(
    ::wpi::proto::ProtobufRotation3d* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufTransform3d.rotation)
}
inline ::wpi::proto::ProtobufRotation3d* ProtobufTransform3d::release_rotation() {
  
  ::wpi::proto::ProtobufRotation3d* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufRotation3d* ProtobufTransform3d::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufTransform3d.rotation)
  
  ::wpi::proto::ProtobufRotation3d* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufRotation3d* ProtobufTransform3d::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufRotation3d>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::wpi::proto::ProtobufRotation3d* ProtobufTransform3d::mutable_rotation() {
  ::wpi::proto::ProtobufRotation3d* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufTransform3d.rotation)
  return _msg;
}
inline void ProtobufTransform3d::set_allocated_rotation(::wpi::proto::ProtobufRotation3d* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufTransform3d.rotation)
}

// -------------------------------------------------------------------

// ProtobufTwist3d

// double dx = 1;
inline void ProtobufTwist3d::clear_dx() {
  _impl_.dx_ = 0;
}
inline double ProtobufTwist3d::_internal_dx() const {
  return _impl_.dx_;
}
inline double ProtobufTwist3d::dx() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTwist3d.dx)
  return _internal_dx();
}
inline void ProtobufTwist3d::_internal_set_dx(double value) {
  
  _impl_.dx_ = value;
}
inline void ProtobufTwist3d::set_dx(double value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTwist3d.dx)
}

// double dy = 2;
inline void ProtobufTwist3d::clear_dy() {
  _impl_.dy_ = 0;
}
inline double ProtobufTwist3d::_internal_dy() const {
  return _impl_.dy_;
}
inline double ProtobufTwist3d::dy() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTwist3d.dy)
  return _internal_dy();
}
inline void ProtobufTwist3d::_internal_set_dy(double value) {
  
  _impl_.dy_ = value;
}
inline void ProtobufTwist3d::set_dy(double value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTwist3d.dy)
}

// double dz = 3;
inline void ProtobufTwist3d::clear_dz() {
  _impl_.dz_ = 0;
}
inline double ProtobufTwist3d::_internal_dz() const {
  return _impl_.dz_;
}
inline double ProtobufTwist3d::dz() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTwist3d.dz)
  return _internal_dz();
}
inline void ProtobufTwist3d::_internal_set_dz(double value) {
  
  _impl_.dz_ = value;
}
inline void ProtobufTwist3d::set_dz(double value) {
  _internal_set_dz(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTwist3d.dz)
}

// double rx = 4;
inline void ProtobufTwist3d::clear_rx() {
  _impl_.rx_ = 0;
}
inline double ProtobufTwist3d::_internal_rx() const {
  return _impl_.rx_;
}
inline double ProtobufTwist3d::rx() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTwist3d.rx)
  return _internal_rx();
}
inline void ProtobufTwist3d::_internal_set_rx(double value) {
  
  _impl_.rx_ = value;
}
inline void ProtobufTwist3d::set_rx(double value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTwist3d.rx)
}

// double ry = 5;
inline void ProtobufTwist3d::clear_ry() {
  _impl_.ry_ = 0;
}
inline double ProtobufTwist3d::_internal_ry() const {
  return _impl_.ry_;
}
inline double ProtobufTwist3d::ry() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTwist3d.ry)
  return _internal_ry();
}
inline void ProtobufTwist3d::_internal_set_ry(double value) {
  
  _impl_.ry_ = value;
}
inline void ProtobufTwist3d::set_ry(double value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTwist3d.ry)
}

// double rz = 6;
inline void ProtobufTwist3d::clear_rz() {
  _impl_.rz_ = 0;
}
inline double ProtobufTwist3d::_internal_rz() const {
  return _impl_.rz_;
}
inline double ProtobufTwist3d::rz() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTwist3d.rz)
  return _internal_rz();
}
inline void ProtobufTwist3d::_internal_set_rz(double value) {
  
  _impl_.rz_ = value;
}
inline void ProtobufTwist3d::set_rz(double value) {
  _internal_set_rz(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTwist3d.rz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace wpi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geometry3d_2eproto
