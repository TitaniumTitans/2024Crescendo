// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trajectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trajectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "geometry2d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trajectory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trajectory_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trajectory_2eproto;
namespace wpi {
namespace proto {
class ProtobufTrajectory;
struct ProtobufTrajectoryDefaultTypeInternal;
extern ProtobufTrajectoryDefaultTypeInternal _ProtobufTrajectory_default_instance_;
class ProtobufTrajectoryState;
struct ProtobufTrajectoryStateDefaultTypeInternal;
extern ProtobufTrajectoryStateDefaultTypeInternal _ProtobufTrajectoryState_default_instance_;
}  // namespace proto
}  // namespace wpi
PROTOBUF_NAMESPACE_OPEN
template<> ::wpi::proto::ProtobufTrajectory* Arena::CreateMaybeMessage<::wpi::proto::ProtobufTrajectory>(Arena*);
template<> ::wpi::proto::ProtobufTrajectoryState* Arena::CreateMaybeMessage<::wpi::proto::ProtobufTrajectoryState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wpi {
namespace proto {

// ===================================================================

class ProtobufTrajectoryState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufTrajectoryState) */ {
 public:
  inline ProtobufTrajectoryState() : ProtobufTrajectoryState(nullptr) {}
  ~ProtobufTrajectoryState() override;
  explicit PROTOBUF_CONSTEXPR ProtobufTrajectoryState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufTrajectoryState(const ProtobufTrajectoryState& from);
  ProtobufTrajectoryState(ProtobufTrajectoryState&& from) noexcept
    : ProtobufTrajectoryState() {
    *this = ::std::move(from);
  }

  inline ProtobufTrajectoryState& operator=(const ProtobufTrajectoryState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufTrajectoryState& operator=(ProtobufTrajectoryState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufTrajectoryState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufTrajectoryState* internal_default_instance() {
    return reinterpret_cast<const ProtobufTrajectoryState*>(
               &_ProtobufTrajectoryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtobufTrajectoryState& a, ProtobufTrajectoryState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufTrajectoryState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufTrajectoryState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufTrajectoryState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufTrajectoryState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufTrajectoryState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufTrajectoryState& from) {
    ProtobufTrajectoryState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufTrajectoryState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufTrajectoryState";
  }
  protected:
  explicit ProtobufTrajectoryState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 4,
    kTimeFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kAccelerationFieldNumber = 3,
    kCurvatureFieldNumber = 5,
  };
  // .wpi.proto.ProtobufPose2d pose = 4;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::wpi::proto::ProtobufPose2d& pose() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufPose2d* release_pose();
  ::wpi::proto::ProtobufPose2d* mutable_pose();
  void set_allocated_pose(::wpi::proto::ProtobufPose2d* pose);
  private:
  const ::wpi::proto::ProtobufPose2d& _internal_pose() const;
  ::wpi::proto::ProtobufPose2d* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::wpi::proto::ProtobufPose2d* pose);
  ::wpi::proto::ProtobufPose2d* unsafe_arena_release_pose();

  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // double velocity = 2;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // double acceleration = 3;
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // double curvature = 5;
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufTrajectoryState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wpi::proto::ProtobufPose2d* pose_;
    double time_;
    double velocity_;
    double acceleration_;
    double curvature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trajectory_2eproto;
};
// -------------------------------------------------------------------

class ProtobufTrajectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufTrajectory) */ {
 public:
  inline ProtobufTrajectory() : ProtobufTrajectory(nullptr) {}
  ~ProtobufTrajectory() override;
  explicit PROTOBUF_CONSTEXPR ProtobufTrajectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufTrajectory(const ProtobufTrajectory& from);
  ProtobufTrajectory(ProtobufTrajectory&& from) noexcept
    : ProtobufTrajectory() {
    *this = ::std::move(from);
  }

  inline ProtobufTrajectory& operator=(const ProtobufTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufTrajectory& operator=(ProtobufTrajectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufTrajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufTrajectory* internal_default_instance() {
    return reinterpret_cast<const ProtobufTrajectory*>(
               &_ProtobufTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtobufTrajectory& a, ProtobufTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufTrajectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufTrajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufTrajectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufTrajectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufTrajectory& from) {
    ProtobufTrajectory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufTrajectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufTrajectory";
  }
  protected:
  explicit ProtobufTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
  };
  // repeated .wpi.proto.ProtobufTrajectoryState states = 2;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::wpi::proto::ProtobufTrajectoryState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTrajectoryState >*
      mutable_states();
  private:
  const ::wpi::proto::ProtobufTrajectoryState& _internal_states(int index) const;
  ::wpi::proto::ProtobufTrajectoryState* _internal_add_states();
  public:
  const ::wpi::proto::ProtobufTrajectoryState& states(int index) const;
  ::wpi::proto::ProtobufTrajectoryState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTrajectoryState >&
      states() const;

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufTrajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTrajectoryState > states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trajectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtobufTrajectoryState

// double time = 1;
inline void ProtobufTrajectoryState::clear_time() {
  _impl_.time_ = 0;
}
inline double ProtobufTrajectoryState::_internal_time() const {
  return _impl_.time_;
}
inline double ProtobufTrajectoryState::time() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTrajectoryState.time)
  return _internal_time();
}
inline void ProtobufTrajectoryState::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void ProtobufTrajectoryState::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTrajectoryState.time)
}

// double velocity = 2;
inline void ProtobufTrajectoryState::clear_velocity() {
  _impl_.velocity_ = 0;
}
inline double ProtobufTrajectoryState::_internal_velocity() const {
  return _impl_.velocity_;
}
inline double ProtobufTrajectoryState::velocity() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTrajectoryState.velocity)
  return _internal_velocity();
}
inline void ProtobufTrajectoryState::_internal_set_velocity(double value) {
  
  _impl_.velocity_ = value;
}
inline void ProtobufTrajectoryState::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTrajectoryState.velocity)
}

// double acceleration = 3;
inline void ProtobufTrajectoryState::clear_acceleration() {
  _impl_.acceleration_ = 0;
}
inline double ProtobufTrajectoryState::_internal_acceleration() const {
  return _impl_.acceleration_;
}
inline double ProtobufTrajectoryState::acceleration() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTrajectoryState.acceleration)
  return _internal_acceleration();
}
inline void ProtobufTrajectoryState::_internal_set_acceleration(double value) {
  
  _impl_.acceleration_ = value;
}
inline void ProtobufTrajectoryState::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTrajectoryState.acceleration)
}

// .wpi.proto.ProtobufPose2d pose = 4;
inline bool ProtobufTrajectoryState::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool ProtobufTrajectoryState::has_pose() const {
  return _internal_has_pose();
}
inline const ::wpi::proto::ProtobufPose2d& ProtobufTrajectoryState::_internal_pose() const {
  const ::wpi::proto::ProtobufPose2d* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufPose2d&>(
      ::wpi::proto::_ProtobufPose2d_default_instance_);
}
inline const ::wpi::proto::ProtobufPose2d& ProtobufTrajectoryState::pose() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTrajectoryState.pose)
  return _internal_pose();
}
inline void ProtobufTrajectoryState::unsafe_arena_set_allocated_pose(
    ::wpi::proto::ProtobufPose2d* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufTrajectoryState.pose)
}
inline ::wpi::proto::ProtobufPose2d* ProtobufTrajectoryState::release_pose() {
  
  ::wpi::proto::ProtobufPose2d* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufPose2d* ProtobufTrajectoryState::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufTrajectoryState.pose)
  
  ::wpi::proto::ProtobufPose2d* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufPose2d* ProtobufTrajectoryState::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufPose2d>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::wpi::proto::ProtobufPose2d* ProtobufTrajectoryState::mutable_pose() {
  ::wpi::proto::ProtobufPose2d* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufTrajectoryState.pose)
  return _msg;
}
inline void ProtobufTrajectoryState::set_allocated_pose(::wpi::proto::ProtobufPose2d* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufTrajectoryState.pose)
}

// double curvature = 5;
inline void ProtobufTrajectoryState::clear_curvature() {
  _impl_.curvature_ = 0;
}
inline double ProtobufTrajectoryState::_internal_curvature() const {
  return _impl_.curvature_;
}
inline double ProtobufTrajectoryState::curvature() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTrajectoryState.curvature)
  return _internal_curvature();
}
inline void ProtobufTrajectoryState::_internal_set_curvature(double value) {
  
  _impl_.curvature_ = value;
}
inline void ProtobufTrajectoryState::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufTrajectoryState.curvature)
}

// -------------------------------------------------------------------

// ProtobufTrajectory

// repeated .wpi.proto.ProtobufTrajectoryState states = 2;
inline int ProtobufTrajectory::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int ProtobufTrajectory::states_size() const {
  return _internal_states_size();
}
inline void ProtobufTrajectory::clear_states() {
  _impl_.states_.Clear();
}
inline ::wpi::proto::ProtobufTrajectoryState* ProtobufTrajectory::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufTrajectory.states)
  return _impl_.states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTrajectoryState >*
ProtobufTrajectory::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:wpi.proto.ProtobufTrajectory.states)
  return &_impl_.states_;
}
inline const ::wpi::proto::ProtobufTrajectoryState& ProtobufTrajectory::_internal_states(int index) const {
  return _impl_.states_.Get(index);
}
inline const ::wpi::proto::ProtobufTrajectoryState& ProtobufTrajectory::states(int index) const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufTrajectory.states)
  return _internal_states(index);
}
inline ::wpi::proto::ProtobufTrajectoryState* ProtobufTrajectory::_internal_add_states() {
  return _impl_.states_.Add();
}
inline ::wpi::proto::ProtobufTrajectoryState* ProtobufTrajectory::add_states() {
  ::wpi::proto::ProtobufTrajectoryState* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:wpi.proto.ProtobufTrajectory.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTrajectoryState >&
ProtobufTrajectory::states() const {
  // @@protoc_insertion_point(field_list:wpi.proto.ProtobufTrajectory.states)
  return _impl_.states_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace wpi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trajectory_2eproto
