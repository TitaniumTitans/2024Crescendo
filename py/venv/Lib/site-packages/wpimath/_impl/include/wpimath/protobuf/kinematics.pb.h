// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinematics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kinematics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kinematics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "geometry2d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kinematics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kinematics_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kinematics_2eproto;
namespace wpi {
namespace proto {
class ProtobufChassisSpeeds;
struct ProtobufChassisSpeedsDefaultTypeInternal;
extern ProtobufChassisSpeedsDefaultTypeInternal _ProtobufChassisSpeeds_default_instance_;
class ProtobufDifferentialDriveKinematics;
struct ProtobufDifferentialDriveKinematicsDefaultTypeInternal;
extern ProtobufDifferentialDriveKinematicsDefaultTypeInternal _ProtobufDifferentialDriveKinematics_default_instance_;
class ProtobufDifferentialDriveWheelSpeeds;
struct ProtobufDifferentialDriveWheelSpeedsDefaultTypeInternal;
extern ProtobufDifferentialDriveWheelSpeedsDefaultTypeInternal _ProtobufDifferentialDriveWheelSpeeds_default_instance_;
class ProtobufMecanumDriveKinematics;
struct ProtobufMecanumDriveKinematicsDefaultTypeInternal;
extern ProtobufMecanumDriveKinematicsDefaultTypeInternal _ProtobufMecanumDriveKinematics_default_instance_;
class ProtobufMecanumDriveMotorVoltages;
struct ProtobufMecanumDriveMotorVoltagesDefaultTypeInternal;
extern ProtobufMecanumDriveMotorVoltagesDefaultTypeInternal _ProtobufMecanumDriveMotorVoltages_default_instance_;
class ProtobufMecanumDriveWheelPositions;
struct ProtobufMecanumDriveWheelPositionsDefaultTypeInternal;
extern ProtobufMecanumDriveWheelPositionsDefaultTypeInternal _ProtobufMecanumDriveWheelPositions_default_instance_;
class ProtobufMecanumDriveWheelSpeeds;
struct ProtobufMecanumDriveWheelSpeedsDefaultTypeInternal;
extern ProtobufMecanumDriveWheelSpeedsDefaultTypeInternal _ProtobufMecanumDriveWheelSpeeds_default_instance_;
class ProtobufSwerveDriveKinematics;
struct ProtobufSwerveDriveKinematicsDefaultTypeInternal;
extern ProtobufSwerveDriveKinematicsDefaultTypeInternal _ProtobufSwerveDriveKinematics_default_instance_;
class ProtobufSwerveModulePosition;
struct ProtobufSwerveModulePositionDefaultTypeInternal;
extern ProtobufSwerveModulePositionDefaultTypeInternal _ProtobufSwerveModulePosition_default_instance_;
class ProtobufSwerveModuleState;
struct ProtobufSwerveModuleStateDefaultTypeInternal;
extern ProtobufSwerveModuleStateDefaultTypeInternal _ProtobufSwerveModuleState_default_instance_;
}  // namespace proto
}  // namespace wpi
PROTOBUF_NAMESPACE_OPEN
template<> ::wpi::proto::ProtobufChassisSpeeds* Arena::CreateMaybeMessage<::wpi::proto::ProtobufChassisSpeeds>(Arena*);
template<> ::wpi::proto::ProtobufDifferentialDriveKinematics* Arena::CreateMaybeMessage<::wpi::proto::ProtobufDifferentialDriveKinematics>(Arena*);
template<> ::wpi::proto::ProtobufDifferentialDriveWheelSpeeds* Arena::CreateMaybeMessage<::wpi::proto::ProtobufDifferentialDriveWheelSpeeds>(Arena*);
template<> ::wpi::proto::ProtobufMecanumDriveKinematics* Arena::CreateMaybeMessage<::wpi::proto::ProtobufMecanumDriveKinematics>(Arena*);
template<> ::wpi::proto::ProtobufMecanumDriveMotorVoltages* Arena::CreateMaybeMessage<::wpi::proto::ProtobufMecanumDriveMotorVoltages>(Arena*);
template<> ::wpi::proto::ProtobufMecanumDriveWheelPositions* Arena::CreateMaybeMessage<::wpi::proto::ProtobufMecanumDriveWheelPositions>(Arena*);
template<> ::wpi::proto::ProtobufMecanumDriveWheelSpeeds* Arena::CreateMaybeMessage<::wpi::proto::ProtobufMecanumDriveWheelSpeeds>(Arena*);
template<> ::wpi::proto::ProtobufSwerveDriveKinematics* Arena::CreateMaybeMessage<::wpi::proto::ProtobufSwerveDriveKinematics>(Arena*);
template<> ::wpi::proto::ProtobufSwerveModulePosition* Arena::CreateMaybeMessage<::wpi::proto::ProtobufSwerveModulePosition>(Arena*);
template<> ::wpi::proto::ProtobufSwerveModuleState* Arena::CreateMaybeMessage<::wpi::proto::ProtobufSwerveModuleState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wpi {
namespace proto {

// ===================================================================

class ProtobufChassisSpeeds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufChassisSpeeds) */ {
 public:
  inline ProtobufChassisSpeeds() : ProtobufChassisSpeeds(nullptr) {}
  ~ProtobufChassisSpeeds() override;
  explicit PROTOBUF_CONSTEXPR ProtobufChassisSpeeds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufChassisSpeeds(const ProtobufChassisSpeeds& from);
  ProtobufChassisSpeeds(ProtobufChassisSpeeds&& from) noexcept
    : ProtobufChassisSpeeds() {
    *this = ::std::move(from);
  }

  inline ProtobufChassisSpeeds& operator=(const ProtobufChassisSpeeds& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufChassisSpeeds& operator=(ProtobufChassisSpeeds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufChassisSpeeds& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufChassisSpeeds* internal_default_instance() {
    return reinterpret_cast<const ProtobufChassisSpeeds*>(
               &_ProtobufChassisSpeeds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtobufChassisSpeeds& a, ProtobufChassisSpeeds& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufChassisSpeeds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufChassisSpeeds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufChassisSpeeds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufChassisSpeeds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufChassisSpeeds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufChassisSpeeds& from) {
    ProtobufChassisSpeeds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufChassisSpeeds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufChassisSpeeds";
  }
  protected:
  explicit ProtobufChassisSpeeds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVxFieldNumber = 1,
    kVyFieldNumber = 2,
    kOmegaFieldNumber = 3,
  };
  // double vx = 1;
  void clear_vx();
  double vx() const;
  void set_vx(double value);
  private:
  double _internal_vx() const;
  void _internal_set_vx(double value);
  public:

  // double vy = 2;
  void clear_vy();
  double vy() const;
  void set_vy(double value);
  private:
  double _internal_vy() const;
  void _internal_set_vy(double value);
  public:

  // double omega = 3;
  void clear_omega();
  double omega() const;
  void set_omega(double value);
  private:
  double _internal_omega() const;
  void _internal_set_omega(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufChassisSpeeds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double vx_;
    double vy_;
    double omega_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// -------------------------------------------------------------------

class ProtobufDifferentialDriveKinematics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufDifferentialDriveKinematics) */ {
 public:
  inline ProtobufDifferentialDriveKinematics() : ProtobufDifferentialDriveKinematics(nullptr) {}
  ~ProtobufDifferentialDriveKinematics() override;
  explicit PROTOBUF_CONSTEXPR ProtobufDifferentialDriveKinematics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufDifferentialDriveKinematics(const ProtobufDifferentialDriveKinematics& from);
  ProtobufDifferentialDriveKinematics(ProtobufDifferentialDriveKinematics&& from) noexcept
    : ProtobufDifferentialDriveKinematics() {
    *this = ::std::move(from);
  }

  inline ProtobufDifferentialDriveKinematics& operator=(const ProtobufDifferentialDriveKinematics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufDifferentialDriveKinematics& operator=(ProtobufDifferentialDriveKinematics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufDifferentialDriveKinematics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufDifferentialDriveKinematics* internal_default_instance() {
    return reinterpret_cast<const ProtobufDifferentialDriveKinematics*>(
               &_ProtobufDifferentialDriveKinematics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtobufDifferentialDriveKinematics& a, ProtobufDifferentialDriveKinematics& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufDifferentialDriveKinematics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufDifferentialDriveKinematics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufDifferentialDriveKinematics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufDifferentialDriveKinematics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufDifferentialDriveKinematics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufDifferentialDriveKinematics& from) {
    ProtobufDifferentialDriveKinematics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufDifferentialDriveKinematics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufDifferentialDriveKinematics";
  }
  protected:
  explicit ProtobufDifferentialDriveKinematics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackWidthFieldNumber = 1,
  };
  // double track_width = 1;
  void clear_track_width();
  double track_width() const;
  void set_track_width(double value);
  private:
  double _internal_track_width() const;
  void _internal_set_track_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufDifferentialDriveKinematics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double track_width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// -------------------------------------------------------------------

class ProtobufDifferentialDriveWheelSpeeds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufDifferentialDriveWheelSpeeds) */ {
 public:
  inline ProtobufDifferentialDriveWheelSpeeds() : ProtobufDifferentialDriveWheelSpeeds(nullptr) {}
  ~ProtobufDifferentialDriveWheelSpeeds() override;
  explicit PROTOBUF_CONSTEXPR ProtobufDifferentialDriveWheelSpeeds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufDifferentialDriveWheelSpeeds(const ProtobufDifferentialDriveWheelSpeeds& from);
  ProtobufDifferentialDriveWheelSpeeds(ProtobufDifferentialDriveWheelSpeeds&& from) noexcept
    : ProtobufDifferentialDriveWheelSpeeds() {
    *this = ::std::move(from);
  }

  inline ProtobufDifferentialDriveWheelSpeeds& operator=(const ProtobufDifferentialDriveWheelSpeeds& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufDifferentialDriveWheelSpeeds& operator=(ProtobufDifferentialDriveWheelSpeeds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufDifferentialDriveWheelSpeeds& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufDifferentialDriveWheelSpeeds* internal_default_instance() {
    return reinterpret_cast<const ProtobufDifferentialDriveWheelSpeeds*>(
               &_ProtobufDifferentialDriveWheelSpeeds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtobufDifferentialDriveWheelSpeeds& a, ProtobufDifferentialDriveWheelSpeeds& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufDifferentialDriveWheelSpeeds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufDifferentialDriveWheelSpeeds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufDifferentialDriveWheelSpeeds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufDifferentialDriveWheelSpeeds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufDifferentialDriveWheelSpeeds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufDifferentialDriveWheelSpeeds& from) {
    ProtobufDifferentialDriveWheelSpeeds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufDifferentialDriveWheelSpeeds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufDifferentialDriveWheelSpeeds";
  }
  protected:
  explicit ProtobufDifferentialDriveWheelSpeeds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // double left = 1;
  void clear_left();
  double left() const;
  void set_left(double value);
  private:
  double _internal_left() const;
  void _internal_set_left(double value);
  public:

  // double right = 2;
  void clear_right();
  double right() const;
  void set_right(double value);
  private:
  double _internal_right() const;
  void _internal_set_right(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double left_;
    double right_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// -------------------------------------------------------------------

class ProtobufMecanumDriveKinematics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufMecanumDriveKinematics) */ {
 public:
  inline ProtobufMecanumDriveKinematics() : ProtobufMecanumDriveKinematics(nullptr) {}
  ~ProtobufMecanumDriveKinematics() override;
  explicit PROTOBUF_CONSTEXPR ProtobufMecanumDriveKinematics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufMecanumDriveKinematics(const ProtobufMecanumDriveKinematics& from);
  ProtobufMecanumDriveKinematics(ProtobufMecanumDriveKinematics&& from) noexcept
    : ProtobufMecanumDriveKinematics() {
    *this = ::std::move(from);
  }

  inline ProtobufMecanumDriveKinematics& operator=(const ProtobufMecanumDriveKinematics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufMecanumDriveKinematics& operator=(ProtobufMecanumDriveKinematics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufMecanumDriveKinematics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufMecanumDriveKinematics* internal_default_instance() {
    return reinterpret_cast<const ProtobufMecanumDriveKinematics*>(
               &_ProtobufMecanumDriveKinematics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtobufMecanumDriveKinematics& a, ProtobufMecanumDriveKinematics& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufMecanumDriveKinematics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufMecanumDriveKinematics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufMecanumDriveKinematics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufMecanumDriveKinematics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufMecanumDriveKinematics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufMecanumDriveKinematics& from) {
    ProtobufMecanumDriveKinematics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufMecanumDriveKinematics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufMecanumDriveKinematics";
  }
  protected:
  explicit ProtobufMecanumDriveKinematics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontLeftFieldNumber = 1,
    kFrontRightFieldNumber = 2,
    kRearLeftFieldNumber = 3,
    kRearRightFieldNumber = 4,
  };
  // .wpi.proto.ProtobufTranslation2d front_left = 1;
  bool has_front_left() const;
  private:
  bool _internal_has_front_left() const;
  public:
  void clear_front_left();
  const ::wpi::proto::ProtobufTranslation2d& front_left() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufTranslation2d* release_front_left();
  ::wpi::proto::ProtobufTranslation2d* mutable_front_left();
  void set_allocated_front_left(::wpi::proto::ProtobufTranslation2d* front_left);
  private:
  const ::wpi::proto::ProtobufTranslation2d& _internal_front_left() const;
  ::wpi::proto::ProtobufTranslation2d* _internal_mutable_front_left();
  public:
  void unsafe_arena_set_allocated_front_left(
      ::wpi::proto::ProtobufTranslation2d* front_left);
  ::wpi::proto::ProtobufTranslation2d* unsafe_arena_release_front_left();

  // .wpi.proto.ProtobufTranslation2d front_right = 2;
  bool has_front_right() const;
  private:
  bool _internal_has_front_right() const;
  public:
  void clear_front_right();
  const ::wpi::proto::ProtobufTranslation2d& front_right() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufTranslation2d* release_front_right();
  ::wpi::proto::ProtobufTranslation2d* mutable_front_right();
  void set_allocated_front_right(::wpi::proto::ProtobufTranslation2d* front_right);
  private:
  const ::wpi::proto::ProtobufTranslation2d& _internal_front_right() const;
  ::wpi::proto::ProtobufTranslation2d* _internal_mutable_front_right();
  public:
  void unsafe_arena_set_allocated_front_right(
      ::wpi::proto::ProtobufTranslation2d* front_right);
  ::wpi::proto::ProtobufTranslation2d* unsafe_arena_release_front_right();

  // .wpi.proto.ProtobufTranslation2d rear_left = 3;
  bool has_rear_left() const;
  private:
  bool _internal_has_rear_left() const;
  public:
  void clear_rear_left();
  const ::wpi::proto::ProtobufTranslation2d& rear_left() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufTranslation2d* release_rear_left();
  ::wpi::proto::ProtobufTranslation2d* mutable_rear_left();
  void set_allocated_rear_left(::wpi::proto::ProtobufTranslation2d* rear_left);
  private:
  const ::wpi::proto::ProtobufTranslation2d& _internal_rear_left() const;
  ::wpi::proto::ProtobufTranslation2d* _internal_mutable_rear_left();
  public:
  void unsafe_arena_set_allocated_rear_left(
      ::wpi::proto::ProtobufTranslation2d* rear_left);
  ::wpi::proto::ProtobufTranslation2d* unsafe_arena_release_rear_left();

  // .wpi.proto.ProtobufTranslation2d rear_right = 4;
  bool has_rear_right() const;
  private:
  bool _internal_has_rear_right() const;
  public:
  void clear_rear_right();
  const ::wpi::proto::ProtobufTranslation2d& rear_right() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufTranslation2d* release_rear_right();
  ::wpi::proto::ProtobufTranslation2d* mutable_rear_right();
  void set_allocated_rear_right(::wpi::proto::ProtobufTranslation2d* rear_right);
  private:
  const ::wpi::proto::ProtobufTranslation2d& _internal_rear_right() const;
  ::wpi::proto::ProtobufTranslation2d* _internal_mutable_rear_right();
  public:
  void unsafe_arena_set_allocated_rear_right(
      ::wpi::proto::ProtobufTranslation2d* rear_right);
  ::wpi::proto::ProtobufTranslation2d* unsafe_arena_release_rear_right();

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufMecanumDriveKinematics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wpi::proto::ProtobufTranslation2d* front_left_;
    ::wpi::proto::ProtobufTranslation2d* front_right_;
    ::wpi::proto::ProtobufTranslation2d* rear_left_;
    ::wpi::proto::ProtobufTranslation2d* rear_right_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// -------------------------------------------------------------------

class ProtobufMecanumDriveMotorVoltages final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufMecanumDriveMotorVoltages) */ {
 public:
  inline ProtobufMecanumDriveMotorVoltages() : ProtobufMecanumDriveMotorVoltages(nullptr) {}
  ~ProtobufMecanumDriveMotorVoltages() override;
  explicit PROTOBUF_CONSTEXPR ProtobufMecanumDriveMotorVoltages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufMecanumDriveMotorVoltages(const ProtobufMecanumDriveMotorVoltages& from);
  ProtobufMecanumDriveMotorVoltages(ProtobufMecanumDriveMotorVoltages&& from) noexcept
    : ProtobufMecanumDriveMotorVoltages() {
    *this = ::std::move(from);
  }

  inline ProtobufMecanumDriveMotorVoltages& operator=(const ProtobufMecanumDriveMotorVoltages& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufMecanumDriveMotorVoltages& operator=(ProtobufMecanumDriveMotorVoltages&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufMecanumDriveMotorVoltages& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufMecanumDriveMotorVoltages* internal_default_instance() {
    return reinterpret_cast<const ProtobufMecanumDriveMotorVoltages*>(
               &_ProtobufMecanumDriveMotorVoltages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProtobufMecanumDriveMotorVoltages& a, ProtobufMecanumDriveMotorVoltages& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufMecanumDriveMotorVoltages* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufMecanumDriveMotorVoltages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufMecanumDriveMotorVoltages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufMecanumDriveMotorVoltages>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufMecanumDriveMotorVoltages& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufMecanumDriveMotorVoltages& from) {
    ProtobufMecanumDriveMotorVoltages::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufMecanumDriveMotorVoltages* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufMecanumDriveMotorVoltages";
  }
  protected:
  explicit ProtobufMecanumDriveMotorVoltages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontLeftFieldNumber = 1,
    kFrontRightFieldNumber = 2,
    kRearLeftFieldNumber = 3,
    kRearRightFieldNumber = 4,
  };
  // double front_left = 1;
  void clear_front_left();
  double front_left() const;
  void set_front_left(double value);
  private:
  double _internal_front_left() const;
  void _internal_set_front_left(double value);
  public:

  // double front_right = 2;
  void clear_front_right();
  double front_right() const;
  void set_front_right(double value);
  private:
  double _internal_front_right() const;
  void _internal_set_front_right(double value);
  public:

  // double rear_left = 3;
  void clear_rear_left();
  double rear_left() const;
  void set_rear_left(double value);
  private:
  double _internal_rear_left() const;
  void _internal_set_rear_left(double value);
  public:

  // double rear_right = 4;
  void clear_rear_right();
  double rear_right() const;
  void set_rear_right(double value);
  private:
  double _internal_rear_right() const;
  void _internal_set_rear_right(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufMecanumDriveMotorVoltages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double front_left_;
    double front_right_;
    double rear_left_;
    double rear_right_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// -------------------------------------------------------------------

class ProtobufMecanumDriveWheelPositions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufMecanumDriveWheelPositions) */ {
 public:
  inline ProtobufMecanumDriveWheelPositions() : ProtobufMecanumDriveWheelPositions(nullptr) {}
  ~ProtobufMecanumDriveWheelPositions() override;
  explicit PROTOBUF_CONSTEXPR ProtobufMecanumDriveWheelPositions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufMecanumDriveWheelPositions(const ProtobufMecanumDriveWheelPositions& from);
  ProtobufMecanumDriveWheelPositions(ProtobufMecanumDriveWheelPositions&& from) noexcept
    : ProtobufMecanumDriveWheelPositions() {
    *this = ::std::move(from);
  }

  inline ProtobufMecanumDriveWheelPositions& operator=(const ProtobufMecanumDriveWheelPositions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufMecanumDriveWheelPositions& operator=(ProtobufMecanumDriveWheelPositions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufMecanumDriveWheelPositions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufMecanumDriveWheelPositions* internal_default_instance() {
    return reinterpret_cast<const ProtobufMecanumDriveWheelPositions*>(
               &_ProtobufMecanumDriveWheelPositions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProtobufMecanumDriveWheelPositions& a, ProtobufMecanumDriveWheelPositions& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufMecanumDriveWheelPositions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufMecanumDriveWheelPositions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufMecanumDriveWheelPositions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufMecanumDriveWheelPositions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufMecanumDriveWheelPositions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufMecanumDriveWheelPositions& from) {
    ProtobufMecanumDriveWheelPositions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufMecanumDriveWheelPositions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufMecanumDriveWheelPositions";
  }
  protected:
  explicit ProtobufMecanumDriveWheelPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontLeftFieldNumber = 1,
    kFrontRightFieldNumber = 2,
    kRearLeftFieldNumber = 3,
    kRearRightFieldNumber = 4,
  };
  // double front_left = 1;
  void clear_front_left();
  double front_left() const;
  void set_front_left(double value);
  private:
  double _internal_front_left() const;
  void _internal_set_front_left(double value);
  public:

  // double front_right = 2;
  void clear_front_right();
  double front_right() const;
  void set_front_right(double value);
  private:
  double _internal_front_right() const;
  void _internal_set_front_right(double value);
  public:

  // double rear_left = 3;
  void clear_rear_left();
  double rear_left() const;
  void set_rear_left(double value);
  private:
  double _internal_rear_left() const;
  void _internal_set_rear_left(double value);
  public:

  // double rear_right = 4;
  void clear_rear_right();
  double rear_right() const;
  void set_rear_right(double value);
  private:
  double _internal_rear_right() const;
  void _internal_set_rear_right(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufMecanumDriveWheelPositions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double front_left_;
    double front_right_;
    double rear_left_;
    double rear_right_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// -------------------------------------------------------------------

class ProtobufMecanumDriveWheelSpeeds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufMecanumDriveWheelSpeeds) */ {
 public:
  inline ProtobufMecanumDriveWheelSpeeds() : ProtobufMecanumDriveWheelSpeeds(nullptr) {}
  ~ProtobufMecanumDriveWheelSpeeds() override;
  explicit PROTOBUF_CONSTEXPR ProtobufMecanumDriveWheelSpeeds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufMecanumDriveWheelSpeeds(const ProtobufMecanumDriveWheelSpeeds& from);
  ProtobufMecanumDriveWheelSpeeds(ProtobufMecanumDriveWheelSpeeds&& from) noexcept
    : ProtobufMecanumDriveWheelSpeeds() {
    *this = ::std::move(from);
  }

  inline ProtobufMecanumDriveWheelSpeeds& operator=(const ProtobufMecanumDriveWheelSpeeds& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufMecanumDriveWheelSpeeds& operator=(ProtobufMecanumDriveWheelSpeeds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufMecanumDriveWheelSpeeds& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufMecanumDriveWheelSpeeds* internal_default_instance() {
    return reinterpret_cast<const ProtobufMecanumDriveWheelSpeeds*>(
               &_ProtobufMecanumDriveWheelSpeeds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProtobufMecanumDriveWheelSpeeds& a, ProtobufMecanumDriveWheelSpeeds& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufMecanumDriveWheelSpeeds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufMecanumDriveWheelSpeeds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufMecanumDriveWheelSpeeds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufMecanumDriveWheelSpeeds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufMecanumDriveWheelSpeeds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufMecanumDriveWheelSpeeds& from) {
    ProtobufMecanumDriveWheelSpeeds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufMecanumDriveWheelSpeeds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufMecanumDriveWheelSpeeds";
  }
  protected:
  explicit ProtobufMecanumDriveWheelSpeeds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontLeftFieldNumber = 1,
    kFrontRightFieldNumber = 2,
    kRearLeftFieldNumber = 3,
    kRearRightFieldNumber = 4,
  };
  // double front_left = 1;
  void clear_front_left();
  double front_left() const;
  void set_front_left(double value);
  private:
  double _internal_front_left() const;
  void _internal_set_front_left(double value);
  public:

  // double front_right = 2;
  void clear_front_right();
  double front_right() const;
  void set_front_right(double value);
  private:
  double _internal_front_right() const;
  void _internal_set_front_right(double value);
  public:

  // double rear_left = 3;
  void clear_rear_left();
  double rear_left() const;
  void set_rear_left(double value);
  private:
  double _internal_rear_left() const;
  void _internal_set_rear_left(double value);
  public:

  // double rear_right = 4;
  void clear_rear_right();
  double rear_right() const;
  void set_rear_right(double value);
  private:
  double _internal_rear_right() const;
  void _internal_set_rear_right(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double front_left_;
    double front_right_;
    double rear_left_;
    double rear_right_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// -------------------------------------------------------------------

class ProtobufSwerveDriveKinematics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufSwerveDriveKinematics) */ {
 public:
  inline ProtobufSwerveDriveKinematics() : ProtobufSwerveDriveKinematics(nullptr) {}
  ~ProtobufSwerveDriveKinematics() override;
  explicit PROTOBUF_CONSTEXPR ProtobufSwerveDriveKinematics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufSwerveDriveKinematics(const ProtobufSwerveDriveKinematics& from);
  ProtobufSwerveDriveKinematics(ProtobufSwerveDriveKinematics&& from) noexcept
    : ProtobufSwerveDriveKinematics() {
    *this = ::std::move(from);
  }

  inline ProtobufSwerveDriveKinematics& operator=(const ProtobufSwerveDriveKinematics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufSwerveDriveKinematics& operator=(ProtobufSwerveDriveKinematics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufSwerveDriveKinematics& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufSwerveDriveKinematics* internal_default_instance() {
    return reinterpret_cast<const ProtobufSwerveDriveKinematics*>(
               &_ProtobufSwerveDriveKinematics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProtobufSwerveDriveKinematics& a, ProtobufSwerveDriveKinematics& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufSwerveDriveKinematics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufSwerveDriveKinematics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufSwerveDriveKinematics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufSwerveDriveKinematics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufSwerveDriveKinematics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufSwerveDriveKinematics& from) {
    ProtobufSwerveDriveKinematics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufSwerveDriveKinematics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufSwerveDriveKinematics";
  }
  protected:
  explicit ProtobufSwerveDriveKinematics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModulesFieldNumber = 1,
  };
  // repeated .wpi.proto.ProtobufTranslation2d modules = 1;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  ::wpi::proto::ProtobufTranslation2d* mutable_modules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTranslation2d >*
      mutable_modules();
  private:
  const ::wpi::proto::ProtobufTranslation2d& _internal_modules(int index) const;
  ::wpi::proto::ProtobufTranslation2d* _internal_add_modules();
  public:
  const ::wpi::proto::ProtobufTranslation2d& modules(int index) const;
  ::wpi::proto::ProtobufTranslation2d* add_modules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTranslation2d >&
      modules() const;

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufSwerveDriveKinematics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTranslation2d > modules_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// -------------------------------------------------------------------

class ProtobufSwerveModulePosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufSwerveModulePosition) */ {
 public:
  inline ProtobufSwerveModulePosition() : ProtobufSwerveModulePosition(nullptr) {}
  ~ProtobufSwerveModulePosition() override;
  explicit PROTOBUF_CONSTEXPR ProtobufSwerveModulePosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufSwerveModulePosition(const ProtobufSwerveModulePosition& from);
  ProtobufSwerveModulePosition(ProtobufSwerveModulePosition&& from) noexcept
    : ProtobufSwerveModulePosition() {
    *this = ::std::move(from);
  }

  inline ProtobufSwerveModulePosition& operator=(const ProtobufSwerveModulePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufSwerveModulePosition& operator=(ProtobufSwerveModulePosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufSwerveModulePosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufSwerveModulePosition* internal_default_instance() {
    return reinterpret_cast<const ProtobufSwerveModulePosition*>(
               &_ProtobufSwerveModulePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProtobufSwerveModulePosition& a, ProtobufSwerveModulePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufSwerveModulePosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufSwerveModulePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufSwerveModulePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufSwerveModulePosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufSwerveModulePosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufSwerveModulePosition& from) {
    ProtobufSwerveModulePosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufSwerveModulePosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufSwerveModulePosition";
  }
  protected:
  explicit ProtobufSwerveModulePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 2,
    kDistanceFieldNumber = 1,
  };
  // .wpi.proto.ProtobufRotation2d angle = 2;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::wpi::proto::ProtobufRotation2d& angle() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufRotation2d* release_angle();
  ::wpi::proto::ProtobufRotation2d* mutable_angle();
  void set_allocated_angle(::wpi::proto::ProtobufRotation2d* angle);
  private:
  const ::wpi::proto::ProtobufRotation2d& _internal_angle() const;
  ::wpi::proto::ProtobufRotation2d* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::wpi::proto::ProtobufRotation2d* angle);
  ::wpi::proto::ProtobufRotation2d* unsafe_arena_release_angle();

  // double distance = 1;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufSwerveModulePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wpi::proto::ProtobufRotation2d* angle_;
    double distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// -------------------------------------------------------------------

class ProtobufSwerveModuleState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wpi.proto.ProtobufSwerveModuleState) */ {
 public:
  inline ProtobufSwerveModuleState() : ProtobufSwerveModuleState(nullptr) {}
  ~ProtobufSwerveModuleState() override;
  explicit PROTOBUF_CONSTEXPR ProtobufSwerveModuleState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtobufSwerveModuleState(const ProtobufSwerveModuleState& from);
  ProtobufSwerveModuleState(ProtobufSwerveModuleState&& from) noexcept
    : ProtobufSwerveModuleState() {
    *this = ::std::move(from);
  }

  inline ProtobufSwerveModuleState& operator=(const ProtobufSwerveModuleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufSwerveModuleState& operator=(ProtobufSwerveModuleState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufSwerveModuleState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtobufSwerveModuleState* internal_default_instance() {
    return reinterpret_cast<const ProtobufSwerveModuleState*>(
               &_ProtobufSwerveModuleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProtobufSwerveModuleState& a, ProtobufSwerveModuleState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufSwerveModuleState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufSwerveModuleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufSwerveModuleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufSwerveModuleState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtobufSwerveModuleState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProtobufSwerveModuleState& from) {
    ProtobufSwerveModuleState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtobufSwerveModuleState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wpi.proto.ProtobufSwerveModuleState";
  }
  protected:
  explicit ProtobufSwerveModuleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 2,
    kSpeedFieldNumber = 1,
  };
  // .wpi.proto.ProtobufRotation2d angle = 2;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::wpi::proto::ProtobufRotation2d& angle() const;
  PROTOBUF_NODISCARD ::wpi::proto::ProtobufRotation2d* release_angle();
  ::wpi::proto::ProtobufRotation2d* mutable_angle();
  void set_allocated_angle(::wpi::proto::ProtobufRotation2d* angle);
  private:
  const ::wpi::proto::ProtobufRotation2d& _internal_angle() const;
  ::wpi::proto::ProtobufRotation2d* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::wpi::proto::ProtobufRotation2d* angle);
  ::wpi::proto::ProtobufRotation2d* unsafe_arena_release_angle();

  // double speed = 1;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:wpi.proto.ProtobufSwerveModuleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::wpi::proto::ProtobufRotation2d* angle_;
    double speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kinematics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtobufChassisSpeeds

// double vx = 1;
inline void ProtobufChassisSpeeds::clear_vx() {
  _impl_.vx_ = 0;
}
inline double ProtobufChassisSpeeds::_internal_vx() const {
  return _impl_.vx_;
}
inline double ProtobufChassisSpeeds::vx() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufChassisSpeeds.vx)
  return _internal_vx();
}
inline void ProtobufChassisSpeeds::_internal_set_vx(double value) {
  
  _impl_.vx_ = value;
}
inline void ProtobufChassisSpeeds::set_vx(double value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufChassisSpeeds.vx)
}

// double vy = 2;
inline void ProtobufChassisSpeeds::clear_vy() {
  _impl_.vy_ = 0;
}
inline double ProtobufChassisSpeeds::_internal_vy() const {
  return _impl_.vy_;
}
inline double ProtobufChassisSpeeds::vy() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufChassisSpeeds.vy)
  return _internal_vy();
}
inline void ProtobufChassisSpeeds::_internal_set_vy(double value) {
  
  _impl_.vy_ = value;
}
inline void ProtobufChassisSpeeds::set_vy(double value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufChassisSpeeds.vy)
}

// double omega = 3;
inline void ProtobufChassisSpeeds::clear_omega() {
  _impl_.omega_ = 0;
}
inline double ProtobufChassisSpeeds::_internal_omega() const {
  return _impl_.omega_;
}
inline double ProtobufChassisSpeeds::omega() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufChassisSpeeds.omega)
  return _internal_omega();
}
inline void ProtobufChassisSpeeds::_internal_set_omega(double value) {
  
  _impl_.omega_ = value;
}
inline void ProtobufChassisSpeeds::set_omega(double value) {
  _internal_set_omega(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufChassisSpeeds.omega)
}

// -------------------------------------------------------------------

// ProtobufDifferentialDriveKinematics

// double track_width = 1;
inline void ProtobufDifferentialDriveKinematics::clear_track_width() {
  _impl_.track_width_ = 0;
}
inline double ProtobufDifferentialDriveKinematics::_internal_track_width() const {
  return _impl_.track_width_;
}
inline double ProtobufDifferentialDriveKinematics::track_width() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufDifferentialDriveKinematics.track_width)
  return _internal_track_width();
}
inline void ProtobufDifferentialDriveKinematics::_internal_set_track_width(double value) {
  
  _impl_.track_width_ = value;
}
inline void ProtobufDifferentialDriveKinematics::set_track_width(double value) {
  _internal_set_track_width(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufDifferentialDriveKinematics.track_width)
}

// -------------------------------------------------------------------

// ProtobufDifferentialDriveWheelSpeeds

// double left = 1;
inline void ProtobufDifferentialDriveWheelSpeeds::clear_left() {
  _impl_.left_ = 0;
}
inline double ProtobufDifferentialDriveWheelSpeeds::_internal_left() const {
  return _impl_.left_;
}
inline double ProtobufDifferentialDriveWheelSpeeds::left() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufDifferentialDriveWheelSpeeds.left)
  return _internal_left();
}
inline void ProtobufDifferentialDriveWheelSpeeds::_internal_set_left(double value) {
  
  _impl_.left_ = value;
}
inline void ProtobufDifferentialDriveWheelSpeeds::set_left(double value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufDifferentialDriveWheelSpeeds.left)
}

// double right = 2;
inline void ProtobufDifferentialDriveWheelSpeeds::clear_right() {
  _impl_.right_ = 0;
}
inline double ProtobufDifferentialDriveWheelSpeeds::_internal_right() const {
  return _impl_.right_;
}
inline double ProtobufDifferentialDriveWheelSpeeds::right() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufDifferentialDriveWheelSpeeds.right)
  return _internal_right();
}
inline void ProtobufDifferentialDriveWheelSpeeds::_internal_set_right(double value) {
  
  _impl_.right_ = value;
}
inline void ProtobufDifferentialDriveWheelSpeeds::set_right(double value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufDifferentialDriveWheelSpeeds.right)
}

// -------------------------------------------------------------------

// ProtobufMecanumDriveKinematics

// .wpi.proto.ProtobufTranslation2d front_left = 1;
inline bool ProtobufMecanumDriveKinematics::_internal_has_front_left() const {
  return this != internal_default_instance() && _impl_.front_left_ != nullptr;
}
inline bool ProtobufMecanumDriveKinematics::has_front_left() const {
  return _internal_has_front_left();
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufMecanumDriveKinematics::_internal_front_left() const {
  const ::wpi::proto::ProtobufTranslation2d* p = _impl_.front_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufTranslation2d&>(
      ::wpi::proto::_ProtobufTranslation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufMecanumDriveKinematics::front_left() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveKinematics.front_left)
  return _internal_front_left();
}
inline void ProtobufMecanumDriveKinematics::unsafe_arena_set_allocated_front_left(
    ::wpi::proto::ProtobufTranslation2d* front_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.front_left_);
  }
  _impl_.front_left_ = front_left;
  if (front_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufMecanumDriveKinematics.front_left)
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::release_front_left() {
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.front_left_;
  _impl_.front_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::unsafe_arena_release_front_left() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufMecanumDriveKinematics.front_left)
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.front_left_;
  _impl_.front_left_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::_internal_mutable_front_left() {
  
  if (_impl_.front_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufTranslation2d>(GetArenaForAllocation());
    _impl_.front_left_ = p;
  }
  return _impl_.front_left_;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::mutable_front_left() {
  ::wpi::proto::ProtobufTranslation2d* _msg = _internal_mutable_front_left();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufMecanumDriveKinematics.front_left)
  return _msg;
}
inline void ProtobufMecanumDriveKinematics::set_allocated_front_left(::wpi::proto::ProtobufTranslation2d* front_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.front_left_);
  }
  if (front_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_left));
    if (message_arena != submessage_arena) {
      front_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_left, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.front_left_ = front_left;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufMecanumDriveKinematics.front_left)
}

// .wpi.proto.ProtobufTranslation2d front_right = 2;
inline bool ProtobufMecanumDriveKinematics::_internal_has_front_right() const {
  return this != internal_default_instance() && _impl_.front_right_ != nullptr;
}
inline bool ProtobufMecanumDriveKinematics::has_front_right() const {
  return _internal_has_front_right();
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufMecanumDriveKinematics::_internal_front_right() const {
  const ::wpi::proto::ProtobufTranslation2d* p = _impl_.front_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufTranslation2d&>(
      ::wpi::proto::_ProtobufTranslation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufMecanumDriveKinematics::front_right() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveKinematics.front_right)
  return _internal_front_right();
}
inline void ProtobufMecanumDriveKinematics::unsafe_arena_set_allocated_front_right(
    ::wpi::proto::ProtobufTranslation2d* front_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.front_right_);
  }
  _impl_.front_right_ = front_right;
  if (front_right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufMecanumDriveKinematics.front_right)
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::release_front_right() {
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.front_right_;
  _impl_.front_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::unsafe_arena_release_front_right() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufMecanumDriveKinematics.front_right)
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.front_right_;
  _impl_.front_right_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::_internal_mutable_front_right() {
  
  if (_impl_.front_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufTranslation2d>(GetArenaForAllocation());
    _impl_.front_right_ = p;
  }
  return _impl_.front_right_;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::mutable_front_right() {
  ::wpi::proto::ProtobufTranslation2d* _msg = _internal_mutable_front_right();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufMecanumDriveKinematics.front_right)
  return _msg;
}
inline void ProtobufMecanumDriveKinematics::set_allocated_front_right(::wpi::proto::ProtobufTranslation2d* front_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.front_right_);
  }
  if (front_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_right));
    if (message_arena != submessage_arena) {
      front_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_right, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.front_right_ = front_right;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufMecanumDriveKinematics.front_right)
}

// .wpi.proto.ProtobufTranslation2d rear_left = 3;
inline bool ProtobufMecanumDriveKinematics::_internal_has_rear_left() const {
  return this != internal_default_instance() && _impl_.rear_left_ != nullptr;
}
inline bool ProtobufMecanumDriveKinematics::has_rear_left() const {
  return _internal_has_rear_left();
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufMecanumDriveKinematics::_internal_rear_left() const {
  const ::wpi::proto::ProtobufTranslation2d* p = _impl_.rear_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufTranslation2d&>(
      ::wpi::proto::_ProtobufTranslation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufMecanumDriveKinematics::rear_left() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveKinematics.rear_left)
  return _internal_rear_left();
}
inline void ProtobufMecanumDriveKinematics::unsafe_arena_set_allocated_rear_left(
    ::wpi::proto::ProtobufTranslation2d* rear_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rear_left_);
  }
  _impl_.rear_left_ = rear_left;
  if (rear_left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufMecanumDriveKinematics.rear_left)
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::release_rear_left() {
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.rear_left_;
  _impl_.rear_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::unsafe_arena_release_rear_left() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufMecanumDriveKinematics.rear_left)
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.rear_left_;
  _impl_.rear_left_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::_internal_mutable_rear_left() {
  
  if (_impl_.rear_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufTranslation2d>(GetArenaForAllocation());
    _impl_.rear_left_ = p;
  }
  return _impl_.rear_left_;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::mutable_rear_left() {
  ::wpi::proto::ProtobufTranslation2d* _msg = _internal_mutable_rear_left();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufMecanumDriveKinematics.rear_left)
  return _msg;
}
inline void ProtobufMecanumDriveKinematics::set_allocated_rear_left(::wpi::proto::ProtobufTranslation2d* rear_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rear_left_);
  }
  if (rear_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rear_left));
    if (message_arena != submessage_arena) {
      rear_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rear_left, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rear_left_ = rear_left;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufMecanumDriveKinematics.rear_left)
}

// .wpi.proto.ProtobufTranslation2d rear_right = 4;
inline bool ProtobufMecanumDriveKinematics::_internal_has_rear_right() const {
  return this != internal_default_instance() && _impl_.rear_right_ != nullptr;
}
inline bool ProtobufMecanumDriveKinematics::has_rear_right() const {
  return _internal_has_rear_right();
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufMecanumDriveKinematics::_internal_rear_right() const {
  const ::wpi::proto::ProtobufTranslation2d* p = _impl_.rear_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufTranslation2d&>(
      ::wpi::proto::_ProtobufTranslation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufMecanumDriveKinematics::rear_right() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveKinematics.rear_right)
  return _internal_rear_right();
}
inline void ProtobufMecanumDriveKinematics::unsafe_arena_set_allocated_rear_right(
    ::wpi::proto::ProtobufTranslation2d* rear_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rear_right_);
  }
  _impl_.rear_right_ = rear_right;
  if (rear_right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufMecanumDriveKinematics.rear_right)
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::release_rear_right() {
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.rear_right_;
  _impl_.rear_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::unsafe_arena_release_rear_right() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufMecanumDriveKinematics.rear_right)
  
  ::wpi::proto::ProtobufTranslation2d* temp = _impl_.rear_right_;
  _impl_.rear_right_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::_internal_mutable_rear_right() {
  
  if (_impl_.rear_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufTranslation2d>(GetArenaForAllocation());
    _impl_.rear_right_ = p;
  }
  return _impl_.rear_right_;
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufMecanumDriveKinematics::mutable_rear_right() {
  ::wpi::proto::ProtobufTranslation2d* _msg = _internal_mutable_rear_right();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufMecanumDriveKinematics.rear_right)
  return _msg;
}
inline void ProtobufMecanumDriveKinematics::set_allocated_rear_right(::wpi::proto::ProtobufTranslation2d* rear_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rear_right_);
  }
  if (rear_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rear_right));
    if (message_arena != submessage_arena) {
      rear_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rear_right, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rear_right_ = rear_right;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufMecanumDriveKinematics.rear_right)
}

// -------------------------------------------------------------------

// ProtobufMecanumDriveMotorVoltages

// double front_left = 1;
inline void ProtobufMecanumDriveMotorVoltages::clear_front_left() {
  _impl_.front_left_ = 0;
}
inline double ProtobufMecanumDriveMotorVoltages::_internal_front_left() const {
  return _impl_.front_left_;
}
inline double ProtobufMecanumDriveMotorVoltages::front_left() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveMotorVoltages.front_left)
  return _internal_front_left();
}
inline void ProtobufMecanumDriveMotorVoltages::_internal_set_front_left(double value) {
  
  _impl_.front_left_ = value;
}
inline void ProtobufMecanumDriveMotorVoltages::set_front_left(double value) {
  _internal_set_front_left(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveMotorVoltages.front_left)
}

// double front_right = 2;
inline void ProtobufMecanumDriveMotorVoltages::clear_front_right() {
  _impl_.front_right_ = 0;
}
inline double ProtobufMecanumDriveMotorVoltages::_internal_front_right() const {
  return _impl_.front_right_;
}
inline double ProtobufMecanumDriveMotorVoltages::front_right() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveMotorVoltages.front_right)
  return _internal_front_right();
}
inline void ProtobufMecanumDriveMotorVoltages::_internal_set_front_right(double value) {
  
  _impl_.front_right_ = value;
}
inline void ProtobufMecanumDriveMotorVoltages::set_front_right(double value) {
  _internal_set_front_right(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveMotorVoltages.front_right)
}

// double rear_left = 3;
inline void ProtobufMecanumDriveMotorVoltages::clear_rear_left() {
  _impl_.rear_left_ = 0;
}
inline double ProtobufMecanumDriveMotorVoltages::_internal_rear_left() const {
  return _impl_.rear_left_;
}
inline double ProtobufMecanumDriveMotorVoltages::rear_left() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveMotorVoltages.rear_left)
  return _internal_rear_left();
}
inline void ProtobufMecanumDriveMotorVoltages::_internal_set_rear_left(double value) {
  
  _impl_.rear_left_ = value;
}
inline void ProtobufMecanumDriveMotorVoltages::set_rear_left(double value) {
  _internal_set_rear_left(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveMotorVoltages.rear_left)
}

// double rear_right = 4;
inline void ProtobufMecanumDriveMotorVoltages::clear_rear_right() {
  _impl_.rear_right_ = 0;
}
inline double ProtobufMecanumDriveMotorVoltages::_internal_rear_right() const {
  return _impl_.rear_right_;
}
inline double ProtobufMecanumDriveMotorVoltages::rear_right() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveMotorVoltages.rear_right)
  return _internal_rear_right();
}
inline void ProtobufMecanumDriveMotorVoltages::_internal_set_rear_right(double value) {
  
  _impl_.rear_right_ = value;
}
inline void ProtobufMecanumDriveMotorVoltages::set_rear_right(double value) {
  _internal_set_rear_right(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveMotorVoltages.rear_right)
}

// -------------------------------------------------------------------

// ProtobufMecanumDriveWheelPositions

// double front_left = 1;
inline void ProtobufMecanumDriveWheelPositions::clear_front_left() {
  _impl_.front_left_ = 0;
}
inline double ProtobufMecanumDriveWheelPositions::_internal_front_left() const {
  return _impl_.front_left_;
}
inline double ProtobufMecanumDriveWheelPositions::front_left() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveWheelPositions.front_left)
  return _internal_front_left();
}
inline void ProtobufMecanumDriveWheelPositions::_internal_set_front_left(double value) {
  
  _impl_.front_left_ = value;
}
inline void ProtobufMecanumDriveWheelPositions::set_front_left(double value) {
  _internal_set_front_left(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveWheelPositions.front_left)
}

// double front_right = 2;
inline void ProtobufMecanumDriveWheelPositions::clear_front_right() {
  _impl_.front_right_ = 0;
}
inline double ProtobufMecanumDriveWheelPositions::_internal_front_right() const {
  return _impl_.front_right_;
}
inline double ProtobufMecanumDriveWheelPositions::front_right() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveWheelPositions.front_right)
  return _internal_front_right();
}
inline void ProtobufMecanumDriveWheelPositions::_internal_set_front_right(double value) {
  
  _impl_.front_right_ = value;
}
inline void ProtobufMecanumDriveWheelPositions::set_front_right(double value) {
  _internal_set_front_right(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveWheelPositions.front_right)
}

// double rear_left = 3;
inline void ProtobufMecanumDriveWheelPositions::clear_rear_left() {
  _impl_.rear_left_ = 0;
}
inline double ProtobufMecanumDriveWheelPositions::_internal_rear_left() const {
  return _impl_.rear_left_;
}
inline double ProtobufMecanumDriveWheelPositions::rear_left() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveWheelPositions.rear_left)
  return _internal_rear_left();
}
inline void ProtobufMecanumDriveWheelPositions::_internal_set_rear_left(double value) {
  
  _impl_.rear_left_ = value;
}
inline void ProtobufMecanumDriveWheelPositions::set_rear_left(double value) {
  _internal_set_rear_left(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveWheelPositions.rear_left)
}

// double rear_right = 4;
inline void ProtobufMecanumDriveWheelPositions::clear_rear_right() {
  _impl_.rear_right_ = 0;
}
inline double ProtobufMecanumDriveWheelPositions::_internal_rear_right() const {
  return _impl_.rear_right_;
}
inline double ProtobufMecanumDriveWheelPositions::rear_right() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveWheelPositions.rear_right)
  return _internal_rear_right();
}
inline void ProtobufMecanumDriveWheelPositions::_internal_set_rear_right(double value) {
  
  _impl_.rear_right_ = value;
}
inline void ProtobufMecanumDriveWheelPositions::set_rear_right(double value) {
  _internal_set_rear_right(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveWheelPositions.rear_right)
}

// -------------------------------------------------------------------

// ProtobufMecanumDriveWheelSpeeds

// double front_left = 1;
inline void ProtobufMecanumDriveWheelSpeeds::clear_front_left() {
  _impl_.front_left_ = 0;
}
inline double ProtobufMecanumDriveWheelSpeeds::_internal_front_left() const {
  return _impl_.front_left_;
}
inline double ProtobufMecanumDriveWheelSpeeds::front_left() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveWheelSpeeds.front_left)
  return _internal_front_left();
}
inline void ProtobufMecanumDriveWheelSpeeds::_internal_set_front_left(double value) {
  
  _impl_.front_left_ = value;
}
inline void ProtobufMecanumDriveWheelSpeeds::set_front_left(double value) {
  _internal_set_front_left(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveWheelSpeeds.front_left)
}

// double front_right = 2;
inline void ProtobufMecanumDriveWheelSpeeds::clear_front_right() {
  _impl_.front_right_ = 0;
}
inline double ProtobufMecanumDriveWheelSpeeds::_internal_front_right() const {
  return _impl_.front_right_;
}
inline double ProtobufMecanumDriveWheelSpeeds::front_right() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveWheelSpeeds.front_right)
  return _internal_front_right();
}
inline void ProtobufMecanumDriveWheelSpeeds::_internal_set_front_right(double value) {
  
  _impl_.front_right_ = value;
}
inline void ProtobufMecanumDriveWheelSpeeds::set_front_right(double value) {
  _internal_set_front_right(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveWheelSpeeds.front_right)
}

// double rear_left = 3;
inline void ProtobufMecanumDriveWheelSpeeds::clear_rear_left() {
  _impl_.rear_left_ = 0;
}
inline double ProtobufMecanumDriveWheelSpeeds::_internal_rear_left() const {
  return _impl_.rear_left_;
}
inline double ProtobufMecanumDriveWheelSpeeds::rear_left() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveWheelSpeeds.rear_left)
  return _internal_rear_left();
}
inline void ProtobufMecanumDriveWheelSpeeds::_internal_set_rear_left(double value) {
  
  _impl_.rear_left_ = value;
}
inline void ProtobufMecanumDriveWheelSpeeds::set_rear_left(double value) {
  _internal_set_rear_left(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveWheelSpeeds.rear_left)
}

// double rear_right = 4;
inline void ProtobufMecanumDriveWheelSpeeds::clear_rear_right() {
  _impl_.rear_right_ = 0;
}
inline double ProtobufMecanumDriveWheelSpeeds::_internal_rear_right() const {
  return _impl_.rear_right_;
}
inline double ProtobufMecanumDriveWheelSpeeds::rear_right() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufMecanumDriveWheelSpeeds.rear_right)
  return _internal_rear_right();
}
inline void ProtobufMecanumDriveWheelSpeeds::_internal_set_rear_right(double value) {
  
  _impl_.rear_right_ = value;
}
inline void ProtobufMecanumDriveWheelSpeeds::set_rear_right(double value) {
  _internal_set_rear_right(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufMecanumDriveWheelSpeeds.rear_right)
}

// -------------------------------------------------------------------

// ProtobufSwerveDriveKinematics

// repeated .wpi.proto.ProtobufTranslation2d modules = 1;
inline int ProtobufSwerveDriveKinematics::_internal_modules_size() const {
  return _impl_.modules_.size();
}
inline int ProtobufSwerveDriveKinematics::modules_size() const {
  return _internal_modules_size();
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufSwerveDriveKinematics::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufSwerveDriveKinematics.modules)
  return _impl_.modules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTranslation2d >*
ProtobufSwerveDriveKinematics::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:wpi.proto.ProtobufSwerveDriveKinematics.modules)
  return &_impl_.modules_;
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufSwerveDriveKinematics::_internal_modules(int index) const {
  return _impl_.modules_.Get(index);
}
inline const ::wpi::proto::ProtobufTranslation2d& ProtobufSwerveDriveKinematics::modules(int index) const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufSwerveDriveKinematics.modules)
  return _internal_modules(index);
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufSwerveDriveKinematics::_internal_add_modules() {
  return _impl_.modules_.Add();
}
inline ::wpi::proto::ProtobufTranslation2d* ProtobufSwerveDriveKinematics::add_modules() {
  ::wpi::proto::ProtobufTranslation2d* _add = _internal_add_modules();
  // @@protoc_insertion_point(field_add:wpi.proto.ProtobufSwerveDriveKinematics.modules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wpi::proto::ProtobufTranslation2d >&
ProtobufSwerveDriveKinematics::modules() const {
  // @@protoc_insertion_point(field_list:wpi.proto.ProtobufSwerveDriveKinematics.modules)
  return _impl_.modules_;
}

// -------------------------------------------------------------------

// ProtobufSwerveModulePosition

// double distance = 1;
inline void ProtobufSwerveModulePosition::clear_distance() {
  _impl_.distance_ = 0;
}
inline double ProtobufSwerveModulePosition::_internal_distance() const {
  return _impl_.distance_;
}
inline double ProtobufSwerveModulePosition::distance() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufSwerveModulePosition.distance)
  return _internal_distance();
}
inline void ProtobufSwerveModulePosition::_internal_set_distance(double value) {
  
  _impl_.distance_ = value;
}
inline void ProtobufSwerveModulePosition::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufSwerveModulePosition.distance)
}

// .wpi.proto.ProtobufRotation2d angle = 2;
inline bool ProtobufSwerveModulePosition::_internal_has_angle() const {
  return this != internal_default_instance() && _impl_.angle_ != nullptr;
}
inline bool ProtobufSwerveModulePosition::has_angle() const {
  return _internal_has_angle();
}
inline const ::wpi::proto::ProtobufRotation2d& ProtobufSwerveModulePosition::_internal_angle() const {
  const ::wpi::proto::ProtobufRotation2d* p = _impl_.angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufRotation2d&>(
      ::wpi::proto::_ProtobufRotation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufRotation2d& ProtobufSwerveModulePosition::angle() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufSwerveModulePosition.angle)
  return _internal_angle();
}
inline void ProtobufSwerveModulePosition::unsafe_arena_set_allocated_angle(
    ::wpi::proto::ProtobufRotation2d* angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angle_);
  }
  _impl_.angle_ = angle;
  if (angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufSwerveModulePosition.angle)
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufSwerveModulePosition::release_angle() {
  
  ::wpi::proto::ProtobufRotation2d* temp = _impl_.angle_;
  _impl_.angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufSwerveModulePosition::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufSwerveModulePosition.angle)
  
  ::wpi::proto::ProtobufRotation2d* temp = _impl_.angle_;
  _impl_.angle_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufSwerveModulePosition::_internal_mutable_angle() {
  
  if (_impl_.angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufRotation2d>(GetArenaForAllocation());
    _impl_.angle_ = p;
  }
  return _impl_.angle_;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufSwerveModulePosition::mutable_angle() {
  ::wpi::proto::ProtobufRotation2d* _msg = _internal_mutable_angle();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufSwerveModulePosition.angle)
  return _msg;
}
inline void ProtobufSwerveModulePosition::set_allocated_angle(::wpi::proto::ProtobufRotation2d* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angle_);
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle));
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufSwerveModulePosition.angle)
}

// -------------------------------------------------------------------

// ProtobufSwerveModuleState

// double speed = 1;
inline void ProtobufSwerveModuleState::clear_speed() {
  _impl_.speed_ = 0;
}
inline double ProtobufSwerveModuleState::_internal_speed() const {
  return _impl_.speed_;
}
inline double ProtobufSwerveModuleState::speed() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufSwerveModuleState.speed)
  return _internal_speed();
}
inline void ProtobufSwerveModuleState::_internal_set_speed(double value) {
  
  _impl_.speed_ = value;
}
inline void ProtobufSwerveModuleState::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:wpi.proto.ProtobufSwerveModuleState.speed)
}

// .wpi.proto.ProtobufRotation2d angle = 2;
inline bool ProtobufSwerveModuleState::_internal_has_angle() const {
  return this != internal_default_instance() && _impl_.angle_ != nullptr;
}
inline bool ProtobufSwerveModuleState::has_angle() const {
  return _internal_has_angle();
}
inline const ::wpi::proto::ProtobufRotation2d& ProtobufSwerveModuleState::_internal_angle() const {
  const ::wpi::proto::ProtobufRotation2d* p = _impl_.angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::wpi::proto::ProtobufRotation2d&>(
      ::wpi::proto::_ProtobufRotation2d_default_instance_);
}
inline const ::wpi::proto::ProtobufRotation2d& ProtobufSwerveModuleState::angle() const {
  // @@protoc_insertion_point(field_get:wpi.proto.ProtobufSwerveModuleState.angle)
  return _internal_angle();
}
inline void ProtobufSwerveModuleState::unsafe_arena_set_allocated_angle(
    ::wpi::proto::ProtobufRotation2d* angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angle_);
  }
  _impl_.angle_ = angle;
  if (angle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wpi.proto.ProtobufSwerveModuleState.angle)
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufSwerveModuleState::release_angle() {
  
  ::wpi::proto::ProtobufRotation2d* temp = _impl_.angle_;
  _impl_.angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufSwerveModuleState::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_release:wpi.proto.ProtobufSwerveModuleState.angle)
  
  ::wpi::proto::ProtobufRotation2d* temp = _impl_.angle_;
  _impl_.angle_ = nullptr;
  return temp;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufSwerveModuleState::_internal_mutable_angle() {
  
  if (_impl_.angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::wpi::proto::ProtobufRotation2d>(GetArenaForAllocation());
    _impl_.angle_ = p;
  }
  return _impl_.angle_;
}
inline ::wpi::proto::ProtobufRotation2d* ProtobufSwerveModuleState::mutable_angle() {
  ::wpi::proto::ProtobufRotation2d* _msg = _internal_mutable_angle();
  // @@protoc_insertion_point(field_mutable:wpi.proto.ProtobufSwerveModuleState.angle)
  return _msg;
}
inline void ProtobufSwerveModuleState::set_allocated_angle(::wpi::proto::ProtobufRotation2d* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angle_);
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle));
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:wpi.proto.ProtobufSwerveModuleState.angle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace wpi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kinematics_2eproto
