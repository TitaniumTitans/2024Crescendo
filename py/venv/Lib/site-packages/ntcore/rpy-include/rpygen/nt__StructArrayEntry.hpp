

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <networktables\StructArrayTopic.h>










#include <pybind11/stl.h>

#include <wpi_json_type_caster.h>

#include <wpi_span_type_caster.h>

#include <wpystruct.h>


namespace rpygen {


using namespace nt;




template <typename T, typename I>
struct bind_nt__StructArrayEntry {

    

    
  
  
    using SubscriberType [[maybe_unused]] = typename nt::StructArrayEntry<T, I>::SubscriberType;
  
    using PublisherType [[maybe_unused]] = typename nt::StructArrayEntry<T, I>::PublisherType;
  
    using TopicType [[maybe_unused]] = typename nt::StructArrayEntry<T, I>::TopicType;
  
    using ValueType [[maybe_unused]] = typename nt::StructArrayEntry<T, I>::ValueType;
  
    using ParamType [[maybe_unused]] = typename nt::StructArrayEntry<T, I>::ParamType;
  
    using TimestampedValueType [[maybe_unused]] = typename nt::StructArrayEntry<T, I>::TimestampedValueType;
  

    

    py::class_<typename nt::StructArrayEntry<T, I>, nt::StructArraySubscriber<T, I>, nt::StructArrayPublisher<T, I>> cls_StructArrayEntry;

    

    
    

    py::module &m;
    std::string clsName;

bind_nt__StructArrayEntry(py::module &m, const char * clsName) :
    
    cls_StructArrayEntry(m, clsName, py::is_final()),

  

  
  
    m(m),
    clsName(clsName)
{
    
  

}

void finish(const char * set_doc = NULL, const char * add_doc = NULL) {

    

  cls_StructArrayEntry.doc() =
    "NetworkTables struct-encoded value array entry.\n"
"\n"
".. note:: Unlike NetworkTableEntry, the entry goes away when this is destroyed.";

  cls_StructArrayEntry
  
    
  .
def
("getTopic", &nt::StructArrayEntry<T, I>::GetTopic, release_gil(), py::doc(
    "Get the corresponding topic.\n"
"\n"
":returns: Topic")
  )
  
  
  
    
  .
def
("unpublish", &nt::StructArrayEntry<T, I>::Unpublish, release_gil(), py::doc(
    "Stops publishing the entry if it's published.")
  )
  
  
  .def("close", [](nt::StructArrayEntry<T, I> *self) {
  py::gil_scoped_release release;
  *self = nt::StructArrayEntry<T, I>();
}, py::doc("Destroys the entry"))
.def("__enter__", [](nt::StructArrayEntry<T, I> *self) {
  return self;
})
.def("__exit__", [](nt::StructArrayEntry<T, I> *self, py::args args) {
  py::gil_scoped_release release;
  *self = nt::StructArrayEntry<T, I>();
})
;

  



    if (set_doc) {
        cls_StructArrayEntry.doc() = set_doc;
    }
    if (add_doc) {
        cls_StructArrayEntry.doc() = py::cast<std::string>(cls_StructArrayEntry.doc()) + add_doc;
    }

    
}

}; // struct bind_nt__StructArrayEntry

}; // namespace rpygen
